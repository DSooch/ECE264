   ---------------------------------------------------------------------------
   Welcome to the PA03 testing program. This program takes a _long_ time
   to execute. There is a reason for this. You should not rely on this
   program to test your code as you go. Instead, you should think about
   what your code should be doing, and what inputs should produce what
   outputs for each of your functions.
   
        YOU SHOULD THEN TEST EVERY PIECE OF CODE AS YOU WRITE IT 
   
                                 AND 
   
                        FIX MISTAKES AS YOU GO.
   
   When you are convinced that you have the entire assignment 100%% correct,
   then you can use this testing program to test it. 
   
   This will give you your mark assuming that you submit it correctly, and 
   there are no other irregularities.
   ---------------------------------------------------------------------------

test 01 :: passing NULL to strcat_ex()

   const char * z2 = "How did it get so late so soon?";
   char * s1 = NULL;
   int n;
   char * s2 = strcat_ex(&s1, &n, z2);
   // s1 = 0x4d3c040: "How did it get so late so soon?"
   // s2 = 0x4d3c040
   // n = 63
   (pass.)
Memory errors detected, testcase failed.
==21677== Memcheck, a memory error detector
==21677== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==21677== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==21677== Command: /tmp/.11HkrK/a.out 0
==21677== Parent PID: 21676
==21677== 
--21677-- 
--21677-- Valgrind options:
--21677--    --tool=memcheck
--21677--    --leak-check=full
--21677--    --verbose
--21677--    --log-file=memcheck.log
--21677-- Contents of /proc/version:
--21677--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--21677-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--21677-- Page sizes: currently 4096, max supported 4096
--21677-- Valgrind library directory: /usr/lib64/valgrind
--21677-- Reading syms from /tmp/.11HkrK/a.out
--21677-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--21677--    object doesn't have a dynamic symbol table
--21677-- Reading syms from /lib64/ld-2.12.so
--21677--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--21677--   .. build-id is valid
--21677-- Scheduler: using generic scheduler lock implementation.
--21677-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==21677== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-21677-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==21677== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-21677-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==21677== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-21677-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==21677== 
==21677== TO CONTROL THIS PROCESS USING vgdb (which you probably
==21677== don't want to do, unless you know exactly what you're doing,
==21677== or are doing some strange experiment):
==21677==   /usr/lib64/valgrind/../../bin/vgdb --pid=21677 ...command...
==21677== 
==21677== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==21677==   /path/to/gdb /tmp/.11HkrK/a.out
==21677== and then give GDB the following command
==21677==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=21677
==21677== --pid is optional if only one valgrind process is running
==21677== 
--21677-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--21677-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--21677-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--21677-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--21677-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--21677-- Reading syms from /lib64/libc-2.12.so
--21677--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--21677--   .. build-id is valid
--21677-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--21677-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--21677-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--21677-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
--21677-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--21677-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--21677-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--21677-- REDIR: 0x3f79e81120 (strlen) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--21677-- REDIR: 0x3f79f33560 (__strlen_sse42) redirected to 0x4a07f50 (strlen)
--21677-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--21677-- REDIR: 0x3f79e7f470 (strcat) redirected to 0x4a07c20 (strcat)
==21677== Conditional jump or move depends on uninitialised value(s)
==21677==    at 0x4A07C2A: strcat (mc_replace_strmem.c:267)
==21677==    by 0x4028A3: strcat_ex (answer03.c:35)
==21677==    by 0x401004: test_01 (<stdin>:203)
==21677==    by 0x4023F5: main (<stdin>:567)
==21677== 
--21677-- REDIR: 0x3f79e7f6e0 (strcmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--21677-- REDIR: 0x3f79f28290 (__strcmp_sse42) redirected to 0x4a08490 (strcmp)
==21677== 
==21677== HEAP SUMMARY:
==21677==     in use at exit: 0 bytes in 0 blocks
==21677==   total heap usage: 1 allocs, 1 frees, 63 bytes allocated
==21677== 
==21677== All heap blocks were freed -- no leaks are possible
==21677== 
==21677== Use --track-origins=yes to see where uninitialised values come from
==21677== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
==21677== 
==21677== 1 errors in context 1 of 1:
==21677== Conditional jump or move depends on uninitialised value(s)
==21677==    at 0x4A07C2A: strcat (mc_replace_strmem.c:267)
==21677==    by 0x4028A3: strcat_ex (answer03.c:35)
==21677==    by 0x401004: test_01 (<stdin>:203)
==21677==    by 0x4023F5: main (<stdin>:567)
==21677== 
--21677-- 
--21677-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--21677-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==21677== 
==21677== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 02 :: passing NULL to strcat_ex()

   const char * z0 = "";
   char * s1 = NULL;
   int n;
   char * s2 = strcat_ex(&s1, &n, z0);
   // s1 = 0x4d3c040: ""
   // s2 = 0x4d3c040
   // n = 1
   (pass.)
Memory errors detected, testcase failed.
==27764== Memcheck, a memory error detector
==27764== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==27764== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==27764== Command: /tmp/.11HkrK/a.out 1
==27764== Parent PID: 27763
==27764== 
--27764-- 
--27764-- Valgrind options:
--27764--    --tool=memcheck
--27764--    --leak-check=full
--27764--    --verbose
--27764--    --log-file=memcheck.log
--27764-- Contents of /proc/version:
--27764--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--27764-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--27764-- Page sizes: currently 4096, max supported 4096
--27764-- Valgrind library directory: /usr/lib64/valgrind
--27764-- Reading syms from /tmp/.11HkrK/a.out
--27764-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--27764--    object doesn't have a dynamic symbol table
--27764-- Reading syms from /lib64/ld-2.12.so
--27764--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--27764--   .. build-id is valid
--27764-- Scheduler: using generic scheduler lock implementation.
--27764-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==27764== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-27764-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==27764== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-27764-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==27764== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-27764-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==27764== 
==27764== TO CONTROL THIS PROCESS USING vgdb (which you probably
==27764== don't want to do, unless you know exactly what you're doing,
==27764== or are doing some strange experiment):
==27764==   /usr/lib64/valgrind/../../bin/vgdb --pid=27764 ...command...
==27764== 
==27764== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==27764==   /path/to/gdb /tmp/.11HkrK/a.out
==27764== and then give GDB the following command
==27764==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=27764
==27764== --pid is optional if only one valgrind process is running
==27764== 
--27764-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--27764-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--27764-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--27764-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--27764-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--27764-- Reading syms from /lib64/libc-2.12.so
--27764--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--27764--   .. build-id is valid
--27764-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--27764-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--27764-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--27764-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
--27764-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--27764-- REDIR: 0x3f79e81120 (strlen) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--27764-- REDIR: 0x3f79f33560 (__strlen_sse42) redirected to 0x4a07f50 (strlen)
--27764-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--27764-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--27764-- REDIR: 0x3f79e7f470 (strcat) redirected to 0x4a07c20 (strcat)
==27764== Conditional jump or move depends on uninitialised value(s)
==27764==    at 0x4A07C2A: strcat (mc_replace_strmem.c:267)
==27764==    by 0x4028A3: strcat_ex (answer03.c:35)
==27764==    by 0x4011E5: test_02 (<stdin>:232)
==27764==    by 0x402404: main (<stdin>:568)
==27764== 
--27764-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--27764-- REDIR: 0x3f79e7f6e0 (strcmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--27764-- REDIR: 0x3f79f28290 (__strcmp_sse42) redirected to 0x4a08490 (strcmp)
==27764== 
==27764== HEAP SUMMARY:
==27764==     in use at exit: 0 bytes in 0 blocks
==27764==   total heap usage: 1 allocs, 1 frees, 1 bytes allocated
==27764== 
==27764== All heap blocks were freed -- no leaks are possible
==27764== 
==27764== Use --track-origins=yes to see where uninitialised values come from
==27764== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
==27764== 
==27764== 1 errors in context 1 of 1:
==27764== Conditional jump or move depends on uninitialised value(s)
==27764==    at 0x4A07C2A: strcat (mc_replace_strmem.c:267)
==27764==    by 0x4028A3: strcat_ex (answer03.c:35)
==27764==    by 0x4011E5: test_02 (<stdin>:232)
==27764==    by 0x402404: main (<stdin>:568)
==27764== 
--27764-- 
--27764-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--27764-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==27764== 
==27764== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 03 :: no reallocate

   const char * z2 = "How did it get so late so soon?";
   int n = 2048;
   char * s1 = malloc(n);
   char * s3 = s1; // keep a copy
   s1[0] = '\0';
   char * s2 = strcat_ex(&s1, &n, z2);
   // s1 = 0x4d3c040: "How did it get so late so soon?"
   // s2 = 0x4d3c040
   // s3 = 0x4d3c040
   // n = 2048
   (pass.)

test 04 :: force reallocate

   const char * z2 = "How did it get so late so soon?";
   const char * s0 = "Hal, ";
   char * s1 = strdup(s0);
   int n = strlen(s0);
   char * s2 = strcat_ex(&s1, &n, z2);
   // s1 = 0x4d3c090: "Hal, How did it get so late so soon?"
   // s2 = 0x4d3c090
   // n = 73
   (pass.)

test 5 :: explode(...)

   const char * str = "The\nTuring test";
   const char * delims = " \n";
   int n;
   char * * strArr = explode(std, delims, &n);
   // Error, n = 7, but expected 3
   Testcase FAILED. Printing Solution:
Memory errors detected, testcase failed.
==13924== Memcheck, a memory error detector
==13924== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==13924== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==13924== Command: /tmp/.11HkrK/a.out 4
==13924== Parent PID: 13921
==13924== 
--13924-- 
--13924-- Valgrind options:
--13924--    --tool=memcheck
--13924--    --leak-check=full
--13924--    --verbose
--13924--    --log-file=memcheck.log
--13924-- Contents of /proc/version:
--13924--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--13924-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--13924-- Page sizes: currently 4096, max supported 4096
--13924-- Valgrind library directory: /usr/lib64/valgrind
--13924-- Reading syms from /tmp/.11HkrK/a.out
--13924-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--13924--    object doesn't have a dynamic symbol table
--13924-- Reading syms from /lib64/ld-2.12.so
--13924--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--13924--   .. build-id is valid
--13924-- Scheduler: using generic scheduler lock implementation.
--13924-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==13924== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-13924-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==13924== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-13924-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==13924== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-13924-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==13924== 
==13924== TO CONTROL THIS PROCESS USING vgdb (which you probably
==13924== don't want to do, unless you know exactly what you're doing,
==13924== or are doing some strange experiment):
==13924==   /usr/lib64/valgrind/../../bin/vgdb --pid=13924 ...command...
==13924== 
==13924== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==13924==   /path/to/gdb /tmp/.11HkrK/a.out
==13924== and then give GDB the following command
==13924==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=13924
==13924== --pid is optional if only one valgrind process is running
==13924== 
--13924-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--13924-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--13924-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--13924-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--13924-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--13924-- Reading syms from /lib64/libc-2.12.so
--13924--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--13924--   .. build-id is valid
--13924-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--13924-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--13924-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--13924-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--13924-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--13924-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
--13924-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--13924-- REDIR: 0x3f79e7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--13924-- REDIR: 0x3f79f281e0 (__strchr_sse42) redirected to 0x4a07b00 (index)
--13924-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--13924-- REDIR: 0x3f79e89670 (memcpy) redirected to 0x4a08b20 (memcpy)
==13924== Conditional jump or move depends on uninitialised value(s)
==13924==    at 0x401941: test_explode_XX (<stdin>:340)
==13924==    by 0x40243B: main (<stdin>:571)
==13924== 
==13924== Use of uninitialised value of size 8
==13924==    at 0x3F79E43AAB: _itoa_word (_itoa.c:195)
==13924==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==13924==    by 0x3F79E4F199: printf (printf.c:35)
==13924==    by 0x401961: test_explode_XX (<stdin>:341)
==13924==    by 0x40243B: main (<stdin>:571)
==13924== 
==13924== Conditional jump or move depends on uninitialised value(s)
==13924==    at 0x3F79E43AB5: _itoa_word (_itoa.c:195)
==13924==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==13924==    by 0x3F79E4F199: printf (printf.c:35)
==13924==    by 0x401961: test_explode_XX (<stdin>:341)
==13924==    by 0x40243B: main (<stdin>:571)
==13924== 
==13924== Conditional jump or move depends on uninitialised value(s)
==13924==    at 0x3F79E450F3: vfprintf (vfprintf.c:1640)
==13924==    by 0x3F79E4F199: printf (printf.c:35)
==13924==    by 0x401961: test_explode_XX (<stdin>:341)
==13924==    by 0x40243B: main (<stdin>:571)
==13924== 
==13924== Conditional jump or move depends on uninitialised value(s)
==13924==    at 0x3F79E45111: vfprintf (vfprintf.c:1640)
==13924==    by 0x3F79E4F199: printf (printf.c:35)
==13924==    by 0x401961: test_explode_XX (<stdin>:341)
==13924==    by 0x40243B: main (<stdin>:571)
==13924== 
==13924== Conditional jump or move depends on uninitialised value(s)
==13924==    at 0x401B8A: test_explode_XX (<stdin>:359)
==13924==    by 0x40243B: main (<stdin>:571)
==13924== 
==13924== Conditional jump or move depends on uninitialised value(s)
==13924==    at 0x401A60: test_explode_XX (<stdin>:360)
==13924==    by 0x40243B: main (<stdin>:571)
==13924== 
==13924== Invalid read of size 8
==13924==    at 0x401A8F: test_explode_XX (<stdin>:361)
==13924==    by 0x40243B: main (<stdin>:571)
==13924==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==13924== 
==13924== 
==13924== Process terminating with default action of signal 11 (SIGSEGV)
==13924==  Access not within mapped region at address 0x0
==13924==    at 0x401A8F: test_explode_XX (<stdin>:361)
==13924==    by 0x40243B: main (<stdin>:571)
==13924==  If you believe this happened as a result of a stack
==13924==  overflow in your program's main thread (unlikely but
==13924==  possible), you can try to increase the size of the
==13924==  main thread stack using the --main-stacksize= flag.
==13924==  The main thread stack size used in this run was 10485760.
==13924== 
==13924== HEAP SUMMARY:
==13924==     in use at exit: 40 bytes in 4 blocks
==13924==   total heap usage: 4 allocs, 0 frees, 40 bytes allocated
==13924== 
==13924== Searching for pointers to 4 not-freed blocks
==13924== Checked 64,936 bytes
==13924== 
==13924== LEAK SUMMARY:
==13924==    definitely lost: 0 bytes in 0 blocks
==13924==    indirectly lost: 0 bytes in 0 blocks
==13924==      possibly lost: 0 bytes in 0 blocks
==13924==    still reachable: 40 bytes in 4 blocks
==13924==         suppressed: 0 bytes in 0 blocks
==13924== Reachable blocks (those to which a pointer was found) are not shown.
==13924== To see them, rerun with: --leak-check=full --show-reachable=yes
==13924== 
==13924== Use --track-origins=yes to see where uninitialised values come from
==13924== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 6 from 6)
==13924== 
==13924== 1 errors in context 1 of 8:
==13924== Invalid read of size 8
==13924==    at 0x401A8F: test_explode_XX (<stdin>:361)
==13924==    by 0x40243B: main (<stdin>:571)
==13924==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==13924== 
==13924== 
==13924== 1 errors in context 2 of 8:
==13924== Conditional jump or move depends on uninitialised value(s)
==13924==    at 0x401A60: test_explode_XX (<stdin>:360)
==13924==    by 0x40243B: main (<stdin>:571)
==13924== 
==13924== 
==13924== 1 errors in context 3 of 8:
==13924== Conditional jump or move depends on uninitialised value(s)
==13924==    at 0x401B8A: test_explode_XX (<stdin>:359)
==13924==    by 0x40243B: main (<stdin>:571)
==13924== 
==13924== 
==13924== 1 errors in context 4 of 8:
==13924== Conditional jump or move depends on uninitialised value(s)
==13924==    at 0x3F79E45111: vfprintf (vfprintf.c:1640)
==13924==    by 0x3F79E4F199: printf (printf.c:35)
==13924==    by 0x401961: test_explode_XX (<stdin>:341)
==13924==    by 0x40243B: main (<stdin>:571)
==13924== 
==13924== 
==13924== 1 errors in context 5 of 8:
==13924== Conditional jump or move depends on uninitialised value(s)
==13924==    at 0x3F79E450F3: vfprintf (vfprintf.c:1640)
==13924==    by 0x3F79E4F199: printf (printf.c:35)
==13924==    by 0x401961: test_explode_XX (<stdin>:341)
==13924==    by 0x40243B: main (<stdin>:571)
==13924== 
==13924== 
==13924== 1 errors in context 6 of 8:
==13924== Conditional jump or move depends on uninitialised value(s)
==13924==    at 0x3F79E43AB5: _itoa_word (_itoa.c:195)
==13924==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==13924==    by 0x3F79E4F199: printf (printf.c:35)
==13924==    by 0x401961: test_explode_XX (<stdin>:341)
==13924==    by 0x40243B: main (<stdin>:571)
==13924== 
==13924== 
==13924== 1 errors in context 7 of 8:
==13924== Use of uninitialised value of size 8
==13924==    at 0x3F79E43AAB: _itoa_word (_itoa.c:195)
==13924==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==13924==    by 0x3F79E4F199: printf (printf.c:35)
==13924==    by 0x401961: test_explode_XX (<stdin>:341)
==13924==    by 0x40243B: main (<stdin>:571)
==13924== 
==13924== 
==13924== 1 errors in context 8 of 8:
==13924== Conditional jump or move depends on uninitialised value(s)
==13924==    at 0x401941: test_explode_XX (<stdin>:340)
==13924==    by 0x40243B: main (<stdin>:571)
==13924== 
--13924-- 
--13924-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--13924-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==13924== 
==13924== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 6 from 6)

test 6 :: explode(...)

   const char * str = "lady beatle brew";
   const char * delims = " ";
   int n;
   char * * strArr = explode(std, delims, &n);
   // Error, n = 7, but expected 3
   Testcase FAILED. Printing Solution:
Memory errors detected, testcase failed.
==19942== Memcheck, a memory error detector
==19942== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19942== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19942== Command: /tmp/.11HkrK/a.out 5
==19942== Parent PID: 19939
==19942== 
--19942-- 
--19942-- Valgrind options:
--19942--    --tool=memcheck
--19942--    --leak-check=full
--19942--    --verbose
--19942--    --log-file=memcheck.log
--19942-- Contents of /proc/version:
--19942--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--19942-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--19942-- Page sizes: currently 4096, max supported 4096
--19942-- Valgrind library directory: /usr/lib64/valgrind
--19942-- Reading syms from /tmp/.11HkrK/a.out
--19942-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--19942--    object doesn't have a dynamic symbol table
--19942-- Reading syms from /lib64/ld-2.12.so
--19942--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--19942--   .. build-id is valid
--19942-- Scheduler: using generic scheduler lock implementation.
--19942-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==19942== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-19942-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==19942== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-19942-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==19942== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-19942-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==19942== 
==19942== TO CONTROL THIS PROCESS USING vgdb (which you probably
==19942== don't want to do, unless you know exactly what you're doing,
==19942== or are doing some strange experiment):
==19942==   /usr/lib64/valgrind/../../bin/vgdb --pid=19942 ...command...
==19942== 
==19942== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==19942==   /path/to/gdb /tmp/.11HkrK/a.out
==19942== and then give GDB the following command
==19942==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=19942
==19942== --pid is optional if only one valgrind process is running
==19942== 
--19942-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--19942-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--19942-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--19942-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--19942-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--19942-- Reading syms from /lib64/libc-2.12.so
--19942--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--19942--   .. build-id is valid
--19942-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--19942-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--19942-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--19942-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--19942-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--19942-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
--19942-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--19942-- REDIR: 0x3f79e7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--19942-- REDIR: 0x3f79f281e0 (__strchr_sse42) redirected to 0x4a07b00 (index)
--19942-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--19942-- REDIR: 0x3f79e89670 (memcpy) redirected to 0x4a08b20 (memcpy)
==19942== Conditional jump or move depends on uninitialised value(s)
==19942==    at 0x401941: test_explode_XX (<stdin>:340)
==19942==    by 0x402454: main (<stdin>:572)
==19942== 
==19942== Use of uninitialised value of size 8
==19942==    at 0x3F79E43AAB: _itoa_word (_itoa.c:195)
==19942==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==19942==    by 0x3F79E4F199: printf (printf.c:35)
==19942==    by 0x401961: test_explode_XX (<stdin>:341)
==19942==    by 0x402454: main (<stdin>:572)
==19942== 
==19942== Conditional jump or move depends on uninitialised value(s)
==19942==    at 0x3F79E43AB5: _itoa_word (_itoa.c:195)
==19942==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==19942==    by 0x3F79E4F199: printf (printf.c:35)
==19942==    by 0x401961: test_explode_XX (<stdin>:341)
==19942==    by 0x402454: main (<stdin>:572)
==19942== 
==19942== Conditional jump or move depends on uninitialised value(s)
==19942==    at 0x3F79E450F3: vfprintf (vfprintf.c:1640)
==19942==    by 0x3F79E4F199: printf (printf.c:35)
==19942==    by 0x401961: test_explode_XX (<stdin>:341)
==19942==    by 0x402454: main (<stdin>:572)
==19942== 
==19942== Conditional jump or move depends on uninitialised value(s)
==19942==    at 0x3F79E45111: vfprintf (vfprintf.c:1640)
==19942==    by 0x3F79E4F199: printf (printf.c:35)
==19942==    by 0x401961: test_explode_XX (<stdin>:341)
==19942==    by 0x402454: main (<stdin>:572)
==19942== 
==19942== Conditional jump or move depends on uninitialised value(s)
==19942==    at 0x401B8A: test_explode_XX (<stdin>:359)
==19942==    by 0x402454: main (<stdin>:572)
==19942== 
==19942== Conditional jump or move depends on uninitialised value(s)
==19942==    at 0x401A60: test_explode_XX (<stdin>:360)
==19942==    by 0x402454: main (<stdin>:572)
==19942== 
==19942== Invalid read of size 8
==19942==    at 0x401A8F: test_explode_XX (<stdin>:361)
==19942==    by 0x402454: main (<stdin>:572)
==19942==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==19942== 
==19942== 
==19942== Process terminating with default action of signal 11 (SIGSEGV)
==19942==  Access not within mapped region at address 0x0
==19942==    at 0x401A8F: test_explode_XX (<stdin>:361)
==19942==    by 0x402454: main (<stdin>:572)
==19942==  If you believe this happened as a result of a stack
==19942==  overflow in your program's main thread (unlikely but
==19942==  possible), you can try to increase the size of the
==19942==  main thread stack using the --main-stacksize= flag.
==19942==  The main thread stack size used in this run was 10485760.
==19942== 
==19942== HEAP SUMMARY:
==19942==     in use at exit: 41 bytes in 4 blocks
==19942==   total heap usage: 4 allocs, 0 frees, 41 bytes allocated
==19942== 
==19942== Searching for pointers to 4 not-freed blocks
==19942== Checked 64,936 bytes
==19942== 
==19942== LEAK SUMMARY:
==19942==    definitely lost: 0 bytes in 0 blocks
==19942==    indirectly lost: 0 bytes in 0 blocks
==19942==      possibly lost: 0 bytes in 0 blocks
==19942==    still reachable: 41 bytes in 4 blocks
==19942==         suppressed: 0 bytes in 0 blocks
==19942== Reachable blocks (those to which a pointer was found) are not shown.
==19942== To see them, rerun with: --leak-check=full --show-reachable=yes
==19942== 
==19942== Use --track-origins=yes to see where uninitialised values come from
==19942== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 6 from 6)
==19942== 
==19942== 1 errors in context 1 of 8:
==19942== Invalid read of size 8
==19942==    at 0x401A8F: test_explode_XX (<stdin>:361)
==19942==    by 0x402454: main (<stdin>:572)
==19942==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==19942== 
==19942== 
==19942== 1 errors in context 2 of 8:
==19942== Conditional jump or move depends on uninitialised value(s)
==19942==    at 0x401A60: test_explode_XX (<stdin>:360)
==19942==    by 0x402454: main (<stdin>:572)
==19942== 
==19942== 
==19942== 1 errors in context 3 of 8:
==19942== Conditional jump or move depends on uninitialised value(s)
==19942==    at 0x401B8A: test_explode_XX (<stdin>:359)
==19942==    by 0x402454: main (<stdin>:572)
==19942== 
==19942== 
==19942== 1 errors in context 4 of 8:
==19942== Conditional jump or move depends on uninitialised value(s)
==19942==    at 0x3F79E45111: vfprintf (vfprintf.c:1640)
==19942==    by 0x3F79E4F199: printf (printf.c:35)
==19942==    by 0x401961: test_explode_XX (<stdin>:341)
==19942==    by 0x402454: main (<stdin>:572)
==19942== 
==19942== 
==19942== 1 errors in context 5 of 8:
==19942== Conditional jump or move depends on uninitialised value(s)
==19942==    at 0x3F79E450F3: vfprintf (vfprintf.c:1640)
==19942==    by 0x3F79E4F199: printf (printf.c:35)
==19942==    by 0x401961: test_explode_XX (<stdin>:341)
==19942==    by 0x402454: main (<stdin>:572)
==19942== 
==19942== 
==19942== 1 errors in context 6 of 8:
==19942== Conditional jump or move depends on uninitialised value(s)
==19942==    at 0x3F79E43AB5: _itoa_word (_itoa.c:195)
==19942==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==19942==    by 0x3F79E4F199: printf (printf.c:35)
==19942==    by 0x401961: test_explode_XX (<stdin>:341)
==19942==    by 0x402454: main (<stdin>:572)
==19942== 
==19942== 
==19942== 1 errors in context 7 of 8:
==19942== Use of uninitialised value of size 8
==19942==    at 0x3F79E43AAB: _itoa_word (_itoa.c:195)
==19942==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==19942==    by 0x3F79E4F199: printf (printf.c:35)
==19942==    by 0x401961: test_explode_XX (<stdin>:341)
==19942==    by 0x402454: main (<stdin>:572)
==19942== 
==19942== 
==19942== 1 errors in context 8 of 8:
==19942== Conditional jump or move depends on uninitialised value(s)
==19942==    at 0x401941: test_explode_XX (<stdin>:340)
==19942==    by 0x402454: main (<stdin>:572)
==19942== 
--19942-- 
--19942-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--19942-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==19942== 
==19942== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 6 from 6)

test 7 :: explode(...)

   const char * str = "The\nTuring test";
   const char * delims = "";
   int n;
   char * * strArr = explode(std, delims, &n);
   // Error, n = 7, but expected 1
   Testcase FAILED. Printing Solution:
Memory errors detected, testcase failed.
==26463== Memcheck, a memory error detector
==26463== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==26463== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==26463== Command: /tmp/.11HkrK/a.out 6
==26463== Parent PID: 26460
==26463== 
--26463-- 
--26463-- Valgrind options:
--26463--    --tool=memcheck
--26463--    --leak-check=full
--26463--    --verbose
--26463--    --log-file=memcheck.log
--26463-- Contents of /proc/version:
--26463--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--26463-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--26463-- Page sizes: currently 4096, max supported 4096
--26463-- Valgrind library directory: /usr/lib64/valgrind
--26463-- Reading syms from /tmp/.11HkrK/a.out
--26463-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--26463--    object doesn't have a dynamic symbol table
--26463-- Reading syms from /lib64/ld-2.12.so
--26463--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--26463--   .. build-id is valid
--26463-- Scheduler: using generic scheduler lock implementation.
--26463-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==26463== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-26463-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==26463== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-26463-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==26463== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-26463-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==26463== 
==26463== TO CONTROL THIS PROCESS USING vgdb (which you probably
==26463== don't want to do, unless you know exactly what you're doing,
==26463== or are doing some strange experiment):
==26463==   /usr/lib64/valgrind/../../bin/vgdb --pid=26463 ...command...
==26463== 
==26463== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==26463==   /path/to/gdb /tmp/.11HkrK/a.out
==26463== and then give GDB the following command
==26463==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=26463
==26463== --pid is optional if only one valgrind process is running
==26463== 
--26463-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--26463-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--26463-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--26463-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--26463-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--26463-- Reading syms from /lib64/libc-2.12.so
--26463--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--26463--   .. build-id is valid
--26463-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--26463-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--26463-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--26463-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--26463-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--26463-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
--26463-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--26463-- REDIR: 0x3f79e7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--26463-- REDIR: 0x3f79f281e0 (__strchr_sse42) redirected to 0x4a07b00 (index)
--26463-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--26463-- REDIR: 0x3f79e89670 (memcpy) redirected to 0x4a08b20 (memcpy)
==26463== Conditional jump or move depends on uninitialised value(s)
==26463==    at 0x401941: test_explode_XX (<stdin>:340)
==26463==    by 0x40246D: main (<stdin>:573)
==26463== 
==26463== Use of uninitialised value of size 8
==26463==    at 0x3F79E43AAB: _itoa_word (_itoa.c:195)
==26463==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==26463==    by 0x3F79E4F199: printf (printf.c:35)
==26463==    by 0x401961: test_explode_XX (<stdin>:341)
==26463==    by 0x40246D: main (<stdin>:573)
==26463== 
==26463== Conditional jump or move depends on uninitialised value(s)
==26463==    at 0x3F79E43AB5: _itoa_word (_itoa.c:195)
==26463==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==26463==    by 0x3F79E4F199: printf (printf.c:35)
==26463==    by 0x401961: test_explode_XX (<stdin>:341)
==26463==    by 0x40246D: main (<stdin>:573)
==26463== 
==26463== Conditional jump or move depends on uninitialised value(s)
==26463==    at 0x3F79E450F3: vfprintf (vfprintf.c:1640)
==26463==    by 0x3F79E4F199: printf (printf.c:35)
==26463==    by 0x401961: test_explode_XX (<stdin>:341)
==26463==    by 0x40246D: main (<stdin>:573)
==26463== 
==26463== Conditional jump or move depends on uninitialised value(s)
==26463==    at 0x3F79E45111: vfprintf (vfprintf.c:1640)
==26463==    by 0x3F79E4F199: printf (printf.c:35)
==26463==    by 0x401961: test_explode_XX (<stdin>:341)
==26463==    by 0x40246D: main (<stdin>:573)
==26463== 
==26463== Conditional jump or move depends on uninitialised value(s)
==26463==    at 0x401B8A: test_explode_XX (<stdin>:359)
==26463==    by 0x40246D: main (<stdin>:573)
==26463== 
==26463== Conditional jump or move depends on uninitialised value(s)
==26463==    at 0x401A60: test_explode_XX (<stdin>:360)
==26463==    by 0x40246D: main (<stdin>:573)
==26463== 
==26463== Invalid read of size 8
==26463==    at 0x401A8F: test_explode_XX (<stdin>:361)
==26463==    by 0x40246D: main (<stdin>:573)
==26463==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==26463== 
==26463== 
==26463== Process terminating with default action of signal 11 (SIGSEGV)
==26463==  Access not within mapped region at address 0x0
==26463==    at 0x401A8F: test_explode_XX (<stdin>:361)
==26463==    by 0x40246D: main (<stdin>:573)
==26463==  If you believe this happened as a result of a stack
==26463==  overflow in your program's main thread (unlikely but
==26463==  possible), you can try to increase the size of the
==26463==  main thread stack using the --main-stacksize= flag.
==26463==  The main thread stack size used in this run was 10485760.
==26463== 
==26463== HEAP SUMMARY:
==26463==     in use at exit: 24 bytes in 2 blocks
==26463==   total heap usage: 2 allocs, 0 frees, 24 bytes allocated
==26463== 
==26463== Searching for pointers to 2 not-freed blocks
==26463== Checked 64,936 bytes
==26463== 
==26463== LEAK SUMMARY:
==26463==    definitely lost: 0 bytes in 0 blocks
==26463==    indirectly lost: 0 bytes in 0 blocks
==26463==      possibly lost: 0 bytes in 0 blocks
==26463==    still reachable: 24 bytes in 2 blocks
==26463==         suppressed: 0 bytes in 0 blocks
==26463== Reachable blocks (those to which a pointer was found) are not shown.
==26463== To see them, rerun with: --leak-check=full --show-reachable=yes
==26463== 
==26463== Use --track-origins=yes to see where uninitialised values come from
==26463== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 6 from 6)
==26463== 
==26463== 1 errors in context 1 of 8:
==26463== Invalid read of size 8
==26463==    at 0x401A8F: test_explode_XX (<stdin>:361)
==26463==    by 0x40246D: main (<stdin>:573)
==26463==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==26463== 
==26463== 
==26463== 1 errors in context 2 of 8:
==26463== Conditional jump or move depends on uninitialised value(s)
==26463==    at 0x401A60: test_explode_XX (<stdin>:360)
==26463==    by 0x40246D: main (<stdin>:573)
==26463== 
==26463== 
==26463== 1 errors in context 3 of 8:
==26463== Conditional jump or move depends on uninitialised value(s)
==26463==    at 0x401B8A: test_explode_XX (<stdin>:359)
==26463==    by 0x40246D: main (<stdin>:573)
==26463== 
==26463== 
==26463== 1 errors in context 4 of 8:
==26463== Conditional jump or move depends on uninitialised value(s)
==26463==    at 0x3F79E45111: vfprintf (vfprintf.c:1640)
==26463==    by 0x3F79E4F199: printf (printf.c:35)
==26463==    by 0x401961: test_explode_XX (<stdin>:341)
==26463==    by 0x40246D: main (<stdin>:573)
==26463== 
==26463== 
==26463== 1 errors in context 5 of 8:
==26463== Conditional jump or move depends on uninitialised value(s)
==26463==    at 0x3F79E450F3: vfprintf (vfprintf.c:1640)
==26463==    by 0x3F79E4F199: printf (printf.c:35)
==26463==    by 0x401961: test_explode_XX (<stdin>:341)
==26463==    by 0x40246D: main (<stdin>:573)
==26463== 
==26463== 
==26463== 1 errors in context 6 of 8:
==26463== Conditional jump or move depends on uninitialised value(s)
==26463==    at 0x3F79E43AB5: _itoa_word (_itoa.c:195)
==26463==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==26463==    by 0x3F79E4F199: printf (printf.c:35)
==26463==    by 0x401961: test_explode_XX (<stdin>:341)
==26463==    by 0x40246D: main (<stdin>:573)
==26463== 
==26463== 
==26463== 1 errors in context 7 of 8:
==26463== Use of uninitialised value of size 8
==26463==    at 0x3F79E43AAB: _itoa_word (_itoa.c:195)
==26463==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==26463==    by 0x3F79E4F199: printf (printf.c:35)
==26463==    by 0x401961: test_explode_XX (<stdin>:341)
==26463==    by 0x40246D: main (<stdin>:573)
==26463== 
==26463== 
==26463== 1 errors in context 8 of 8:
==26463== Conditional jump or move depends on uninitialised value(s)
==26463==    at 0x401941: test_explode_XX (<stdin>:340)
==26463==    by 0x40246D: main (<stdin>:573)
==26463== 
--26463-- 
--26463-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--26463-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==26463== 
==26463== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 6 from 6)

test 8 :: explode(...)

   const char * str = "The\nTuring test";
   const char * delims = "\n";
   int n;
   char * * strArr = explode(std, delims, &n);
   // Error, n = 7, but expected 2
   Testcase FAILED. Printing Solution:
Memory errors detected, testcase failed.
==413== Memcheck, a memory error detector
==413== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==413== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==413== Command: /tmp/.11HkrK/a.out 7
==413== Parent PID: 410
==413== 
--413-- 
--413-- Valgrind options:
--413--    --tool=memcheck
--413--    --leak-check=full
--413--    --verbose
--413--    --log-file=memcheck.log
--413-- Contents of /proc/version:
--413--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--413-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--413-- Page sizes: currently 4096, max supported 4096
--413-- Valgrind library directory: /usr/lib64/valgrind
--413-- Reading syms from /tmp/.11HkrK/a.out
--413-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--413--    object doesn't have a dynamic symbol table
--413-- Reading syms from /lib64/ld-2.12.so
--413--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--413--   .. build-id is valid
--413-- Scheduler: using generic scheduler lock implementation.
--413-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==413== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-413-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==413== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-413-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==413== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-413-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==413== 
==413== TO CONTROL THIS PROCESS USING vgdb (which you probably
==413== don't want to do, unless you know exactly what you're doing,
==413== or are doing some strange experiment):
==413==   /usr/lib64/valgrind/../../bin/vgdb --pid=413 ...command...
==413== 
==413== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==413==   /path/to/gdb /tmp/.11HkrK/a.out
==413== and then give GDB the following command
==413==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=413
==413== --pid is optional if only one valgrind process is running
==413== 
--413-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--413-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--413-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--413-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--413-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--413-- Reading syms from /lib64/libc-2.12.so
--413--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--413--   .. build-id is valid
--413-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--413-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--413-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--413-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--413-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--413-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
--413-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--413-- REDIR: 0x3f79e7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--413-- REDIR: 0x3f79f281e0 (__strchr_sse42) redirected to 0x4a07b00 (index)
--413-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--413-- REDIR: 0x3f79e89670 (memcpy) redirected to 0x4a08b20 (memcpy)
==413== Conditional jump or move depends on uninitialised value(s)
==413==    at 0x401941: test_explode_XX (<stdin>:340)
==413==    by 0x402486: main (<stdin>:574)
==413== 
==413== Use of uninitialised value of size 8
==413==    at 0x3F79E43AAB: _itoa_word (_itoa.c:195)
==413==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==413==    by 0x3F79E4F199: printf (printf.c:35)
==413==    by 0x401961: test_explode_XX (<stdin>:341)
==413==    by 0x402486: main (<stdin>:574)
==413== 
==413== Conditional jump or move depends on uninitialised value(s)
==413==    at 0x3F79E43AB5: _itoa_word (_itoa.c:195)
==413==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==413==    by 0x3F79E4F199: printf (printf.c:35)
==413==    by 0x401961: test_explode_XX (<stdin>:341)
==413==    by 0x402486: main (<stdin>:574)
==413== 
==413== Conditional jump or move depends on uninitialised value(s)
==413==    at 0x3F79E450F3: vfprintf (vfprintf.c:1640)
==413==    by 0x3F79E4F199: printf (printf.c:35)
==413==    by 0x401961: test_explode_XX (<stdin>:341)
==413==    by 0x402486: main (<stdin>:574)
==413== 
==413== Conditional jump or move depends on uninitialised value(s)
==413==    at 0x3F79E45111: vfprintf (vfprintf.c:1640)
==413==    by 0x3F79E4F199: printf (printf.c:35)
==413==    by 0x401961: test_explode_XX (<stdin>:341)
==413==    by 0x402486: main (<stdin>:574)
==413== 
==413== Conditional jump or move depends on uninitialised value(s)
==413==    at 0x401B8A: test_explode_XX (<stdin>:359)
==413==    by 0x402486: main (<stdin>:574)
==413== 
==413== Conditional jump or move depends on uninitialised value(s)
==413==    at 0x401A60: test_explode_XX (<stdin>:360)
==413==    by 0x402486: main (<stdin>:574)
==413== 
==413== Invalid read of size 8
==413==    at 0x401A8F: test_explode_XX (<stdin>:361)
==413==    by 0x402486: main (<stdin>:574)
==413==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==413== 
==413== 
==413== Process terminating with default action of signal 11 (SIGSEGV)
==413==  Access not within mapped region at address 0x0
==413==    at 0x401A8F: test_explode_XX (<stdin>:361)
==413==    by 0x402486: main (<stdin>:574)
==413==  If you believe this happened as a result of a stack
==413==  overflow in your program's main thread (unlikely but
==413==  possible), you can try to increase the size of the
==413==  main thread stack using the --main-stacksize= flag.
==413==  The main thread stack size used in this run was 10485760.
==413== 
==413== HEAP SUMMARY:
==413==     in use at exit: 32 bytes in 3 blocks
==413==   total heap usage: 3 allocs, 0 frees, 32 bytes allocated
==413== 
==413== Searching for pointers to 3 not-freed blocks
==413== Checked 64,936 bytes
==413== 
==413== LEAK SUMMARY:
==413==    definitely lost: 0 bytes in 0 blocks
==413==    indirectly lost: 0 bytes in 0 blocks
==413==      possibly lost: 0 bytes in 0 blocks
==413==    still reachable: 32 bytes in 3 blocks
==413==         suppressed: 0 bytes in 0 blocks
==413== Reachable blocks (those to which a pointer was found) are not shown.
==413== To see them, rerun with: --leak-check=full --show-reachable=yes
==413== 
==413== Use --track-origins=yes to see where uninitialised values come from
==413== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 6 from 6)
==413== 
==413== 1 errors in context 1 of 8:
==413== Invalid read of size 8
==413==    at 0x401A8F: test_explode_XX (<stdin>:361)
==413==    by 0x402486: main (<stdin>:574)
==413==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==413== 
==413== 
==413== 1 errors in context 2 of 8:
==413== Conditional jump or move depends on uninitialised value(s)
==413==    at 0x401A60: test_explode_XX (<stdin>:360)
==413==    by 0x402486: main (<stdin>:574)
==413== 
==413== 
==413== 1 errors in context 3 of 8:
==413== Conditional jump or move depends on uninitialised value(s)
==413==    at 0x401B8A: test_explode_XX (<stdin>:359)
==413==    by 0x402486: main (<stdin>:574)
==413== 
==413== 
==413== 1 errors in context 4 of 8:
==413== Conditional jump or move depends on uninitialised value(s)
==413==    at 0x3F79E45111: vfprintf (vfprintf.c:1640)
==413==    by 0x3F79E4F199: printf (printf.c:35)
==413==    by 0x401961: test_explode_XX (<stdin>:341)
==413==    by 0x402486: main (<stdin>:574)
==413== 
==413== 
==413== 1 errors in context 5 of 8:
==413== Conditional jump or move depends on uninitialised value(s)
==413==    at 0x3F79E450F3: vfprintf (vfprintf.c:1640)
==413==    by 0x3F79E4F199: printf (printf.c:35)
==413==    by 0x401961: test_explode_XX (<stdin>:341)
==413==    by 0x402486: main (<stdin>:574)
==413== 
==413== 
==413== 1 errors in context 6 of 8:
==413== Conditional jump or move depends on uninitialised value(s)
==413==    at 0x3F79E43AB5: _itoa_word (_itoa.c:195)
==413==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==413==    by 0x3F79E4F199: printf (printf.c:35)
==413==    by 0x401961: test_explode_XX (<stdin>:341)
==413==    by 0x402486: main (<stdin>:574)
==413== 
==413== 
==413== 1 errors in context 7 of 8:
==413== Use of uninitialised value of size 8
==413==    at 0x3F79E43AAB: _itoa_word (_itoa.c:195)
==413==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==413==    by 0x3F79E4F199: printf (printf.c:35)
==413==    by 0x401961: test_explode_XX (<stdin>:341)
==413==    by 0x402486: main (<stdin>:574)
==413== 
==413== 
==413== 1 errors in context 8 of 8:
==413== Conditional jump or move depends on uninitialised value(s)
==413==    at 0x401941: test_explode_XX (<stdin>:340)
==413==    by 0x402486: main (<stdin>:574)
==413== 
--413-- 
--413-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--413-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==413== 
==413== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 6 from 6)

test 9 :: explode(...)

   const char * str = "The\nTuring test";
   const char * delims = "Tt";
   int n;
   char * * strArr = explode(std, delims, &n);
   // Error, n = 7, but expected 5
   Testcase FAILED. Printing Solution:
Memory errors detected, testcase failed.
==6451== Memcheck, a memory error detector
==6451== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==6451== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==6451== Command: /tmp/.11HkrK/a.out 8
==6451== Parent PID: 6449
==6451== 
--6451-- 
--6451-- Valgrind options:
--6451--    --tool=memcheck
--6451--    --leak-check=full
--6451--    --verbose
--6451--    --log-file=memcheck.log
--6451-- Contents of /proc/version:
--6451--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--6451-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--6451-- Page sizes: currently 4096, max supported 4096
--6451-- Valgrind library directory: /usr/lib64/valgrind
--6451-- Reading syms from /tmp/.11HkrK/a.out
--6451-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--6451--    object doesn't have a dynamic symbol table
--6451-- Reading syms from /lib64/ld-2.12.so
--6451--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--6451--   .. build-id is valid
--6451-- Scheduler: using generic scheduler lock implementation.
--6451-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==6451== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-6451-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==6451== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-6451-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==6451== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-6451-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==6451== 
==6451== TO CONTROL THIS PROCESS USING vgdb (which you probably
==6451== don't want to do, unless you know exactly what you're doing,
==6451== or are doing some strange experiment):
==6451==   /usr/lib64/valgrind/../../bin/vgdb --pid=6451 ...command...
==6451== 
==6451== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==6451==   /path/to/gdb /tmp/.11HkrK/a.out
==6451== and then give GDB the following command
==6451==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=6451
==6451== --pid is optional if only one valgrind process is running
==6451== 
--6451-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--6451-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--6451-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--6451-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--6451-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--6451-- Reading syms from /lib64/libc-2.12.so
--6451--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--6451--   .. build-id is valid
--6451-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--6451-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--6451-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--6451-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--6451-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--6451-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
--6451-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--6451-- REDIR: 0x3f79e7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--6451-- REDIR: 0x3f79f281e0 (__strchr_sse42) redirected to 0x4a07b00 (index)
--6451-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--6451-- REDIR: 0x3f79e89670 (memcpy) redirected to 0x4a08b20 (memcpy)
==6451== Conditional jump or move depends on uninitialised value(s)
==6451==    at 0x401941: test_explode_XX (<stdin>:340)
==6451==    by 0x40249F: main (<stdin>:575)
==6451== 
==6451== Use of uninitialised value of size 8
==6451==    at 0x3F79E43AAB: _itoa_word (_itoa.c:195)
==6451==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==6451==    by 0x3F79E4F199: printf (printf.c:35)
==6451==    by 0x401961: test_explode_XX (<stdin>:341)
==6451==    by 0x40249F: main (<stdin>:575)
==6451== 
==6451== Conditional jump or move depends on uninitialised value(s)
==6451==    at 0x3F79E43AB5: _itoa_word (_itoa.c:195)
==6451==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==6451==    by 0x3F79E4F199: printf (printf.c:35)
==6451==    by 0x401961: test_explode_XX (<stdin>:341)
==6451==    by 0x40249F: main (<stdin>:575)
==6451== 
==6451== Conditional jump or move depends on uninitialised value(s)
==6451==    at 0x3F79E450F3: vfprintf (vfprintf.c:1640)
==6451==    by 0x3F79E4F199: printf (printf.c:35)
==6451==    by 0x401961: test_explode_XX (<stdin>:341)
==6451==    by 0x40249F: main (<stdin>:575)
==6451== 
==6451== Conditional jump or move depends on uninitialised value(s)
==6451==    at 0x3F79E45111: vfprintf (vfprintf.c:1640)
==6451==    by 0x3F79E4F199: printf (printf.c:35)
==6451==    by 0x401961: test_explode_XX (<stdin>:341)
==6451==    by 0x40249F: main (<stdin>:575)
==6451== 
==6451== Conditional jump or move depends on uninitialised value(s)
==6451==    at 0x401B8A: test_explode_XX (<stdin>:359)
==6451==    by 0x40249F: main (<stdin>:575)
==6451== 
==6451== Conditional jump or move depends on uninitialised value(s)
==6451==    at 0x401A60: test_explode_XX (<stdin>:360)
==6451==    by 0x40249F: main (<stdin>:575)
==6451== 
==6451== Invalid read of size 8
==6451==    at 0x401A8F: test_explode_XX (<stdin>:361)
==6451==    by 0x40249F: main (<stdin>:575)
==6451==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==6451== 
==6451== 
==6451== Process terminating with default action of signal 11 (SIGSEGV)
==6451==  Access not within mapped region at address 0x0
==6451==    at 0x401A8F: test_explode_XX (<stdin>:361)
==6451==    by 0x40249F: main (<stdin>:575)
==6451==  If you believe this happened as a result of a stack
==6451==  overflow in your program's main thread (unlikely but
==6451==  possible), you can try to increase the size of the
==6451==  main thread stack using the --main-stacksize= flag.
==6451==  The main thread stack size used in this run was 10485760.
==6451== 
==6451== HEAP SUMMARY:
==6451==     in use at exit: 56 bytes in 6 blocks
==6451==   total heap usage: 6 allocs, 0 frees, 56 bytes allocated
==6451== 
==6451== Searching for pointers to 6 not-freed blocks
==6451== Checked 64,952 bytes
==6451== 
==6451== LEAK SUMMARY:
==6451==    definitely lost: 0 bytes in 0 blocks
==6451==    indirectly lost: 0 bytes in 0 blocks
==6451==      possibly lost: 0 bytes in 0 blocks
==6451==    still reachable: 56 bytes in 6 blocks
==6451==         suppressed: 0 bytes in 0 blocks
==6451== Reachable blocks (those to which a pointer was found) are not shown.
==6451== To see them, rerun with: --leak-check=full --show-reachable=yes
==6451== 
==6451== Use --track-origins=yes to see where uninitialised values come from
==6451== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 6 from 6)
==6451== 
==6451== 1 errors in context 1 of 8:
==6451== Invalid read of size 8
==6451==    at 0x401A8F: test_explode_XX (<stdin>:361)
==6451==    by 0x40249F: main (<stdin>:575)
==6451==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==6451== 
==6451== 
==6451== 1 errors in context 2 of 8:
==6451== Conditional jump or move depends on uninitialised value(s)
==6451==    at 0x401A60: test_explode_XX (<stdin>:360)
==6451==    by 0x40249F: main (<stdin>:575)
==6451== 
==6451== 
==6451== 1 errors in context 3 of 8:
==6451== Conditional jump or move depends on uninitialised value(s)
==6451==    at 0x401B8A: test_explode_XX (<stdin>:359)
==6451==    by 0x40249F: main (<stdin>:575)
==6451== 
==6451== 
==6451== 1 errors in context 4 of 8:
==6451== Conditional jump or move depends on uninitialised value(s)
==6451==    at 0x3F79E45111: vfprintf (vfprintf.c:1640)
==6451==    by 0x3F79E4F199: printf (printf.c:35)
==6451==    by 0x401961: test_explode_XX (<stdin>:341)
==6451==    by 0x40249F: main (<stdin>:575)
==6451== 
==6451== 
==6451== 1 errors in context 5 of 8:
==6451== Conditional jump or move depends on uninitialised value(s)
==6451==    at 0x3F79E450F3: vfprintf (vfprintf.c:1640)
==6451==    by 0x3F79E4F199: printf (printf.c:35)
==6451==    by 0x401961: test_explode_XX (<stdin>:341)
==6451==    by 0x40249F: main (<stdin>:575)
==6451== 
==6451== 
==6451== 1 errors in context 6 of 8:
==6451== Conditional jump or move depends on uninitialised value(s)
==6451==    at 0x3F79E43AB5: _itoa_word (_itoa.c:195)
==6451==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==6451==    by 0x3F79E4F199: printf (printf.c:35)
==6451==    by 0x401961: test_explode_XX (<stdin>:341)
==6451==    by 0x40249F: main (<stdin>:575)
==6451== 
==6451== 
==6451== 1 errors in context 7 of 8:
==6451== Use of uninitialised value of size 8
==6451==    at 0x3F79E43AAB: _itoa_word (_itoa.c:195)
==6451==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==6451==    by 0x3F79E4F199: printf (printf.c:35)
==6451==    by 0x401961: test_explode_XX (<stdin>:341)
==6451==    by 0x40249F: main (<stdin>:575)
==6451== 
==6451== 
==6451== 1 errors in context 8 of 8:
==6451== Conditional jump or move depends on uninitialised value(s)
==6451==    at 0x401941: test_explode_XX (<stdin>:340)
==6451==    by 0x40249F: main (<stdin>:575)
==6451== 
--6451-- 
--6451-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--6451-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==6451== 
==6451== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 6 from 6)

test 10 :: explode(...)

   const char * str = "";
   const char * delims = "Tt";
   int n;
   char * * strArr = explode(std, delims, &n);
   // Error, n = 7, but expected 1
   Testcase FAILED. Printing Solution:
Memory errors detected, testcase failed.
==13014== Memcheck, a memory error detector
==13014== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==13014== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==13014== Command: /tmp/.11HkrK/a.out 9
==13014== Parent PID: 13011
==13014== 
--13014-- 
--13014-- Valgrind options:
--13014--    --tool=memcheck
--13014--    --leak-check=full
--13014--    --verbose
--13014--    --log-file=memcheck.log
--13014-- Contents of /proc/version:
--13014--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--13014-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--13014-- Page sizes: currently 4096, max supported 4096
--13014-- Valgrind library directory: /usr/lib64/valgrind
--13014-- Reading syms from /tmp/.11HkrK/a.out
--13014-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--13014--    object doesn't have a dynamic symbol table
--13014-- Reading syms from /lib64/ld-2.12.so
--13014--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--13014--   .. build-id is valid
--13014-- Scheduler: using generic scheduler lock implementation.
--13014-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==13014== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-13014-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==13014== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-13014-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==13014== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-13014-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==13014== 
==13014== TO CONTROL THIS PROCESS USING vgdb (which you probably
==13014== don't want to do, unless you know exactly what you're doing,
==13014== or are doing some strange experiment):
==13014==   /usr/lib64/valgrind/../../bin/vgdb --pid=13014 ...command...
==13014== 
==13014== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==13014==   /path/to/gdb /tmp/.11HkrK/a.out
==13014== and then give GDB the following command
==13014==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=13014
==13014== --pid is optional if only one valgrind process is running
==13014== 
--13014-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--13014-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--13014-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--13014-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--13014-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--13014-- Reading syms from /lib64/libc-2.12.so
--13014--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--13014--   .. build-id is valid
--13014-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--13014-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--13014-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--13014-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--13014-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--13014-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
--13014-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--13014-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--13014-- REDIR: 0x3f79e89670 (memcpy) redirected to 0x4a08b20 (memcpy)
==13014== Conditional jump or move depends on uninitialised value(s)
==13014==    at 0x401941: test_explode_XX (<stdin>:340)
==13014==    by 0x4024B8: main (<stdin>:576)
==13014== 
==13014== Use of uninitialised value of size 8
==13014==    at 0x3F79E43AAB: _itoa_word (_itoa.c:195)
==13014==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==13014==    by 0x3F79E4F199: printf (printf.c:35)
==13014==    by 0x401961: test_explode_XX (<stdin>:341)
==13014==    by 0x4024B8: main (<stdin>:576)
==13014== 
==13014== Conditional jump or move depends on uninitialised value(s)
==13014==    at 0x3F79E43AB5: _itoa_word (_itoa.c:195)
==13014==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==13014==    by 0x3F79E4F199: printf (printf.c:35)
==13014==    by 0x401961: test_explode_XX (<stdin>:341)
==13014==    by 0x4024B8: main (<stdin>:576)
==13014== 
==13014== Conditional jump or move depends on uninitialised value(s)
==13014==    at 0x3F79E450F3: vfprintf (vfprintf.c:1640)
==13014==    by 0x3F79E4F199: printf (printf.c:35)
==13014==    by 0x401961: test_explode_XX (<stdin>:341)
==13014==    by 0x4024B8: main (<stdin>:576)
==13014== 
==13014== Conditional jump or move depends on uninitialised value(s)
==13014==    at 0x3F79E45111: vfprintf (vfprintf.c:1640)
==13014==    by 0x3F79E4F199: printf (printf.c:35)
==13014==    by 0x401961: test_explode_XX (<stdin>:341)
==13014==    by 0x4024B8: main (<stdin>:576)
==13014== 
==13014== Conditional jump or move depends on uninitialised value(s)
==13014==    at 0x401B8A: test_explode_XX (<stdin>:359)
==13014==    by 0x4024B8: main (<stdin>:576)
==13014== 
==13014== Conditional jump or move depends on uninitialised value(s)
==13014==    at 0x401A60: test_explode_XX (<stdin>:360)
==13014==    by 0x4024B8: main (<stdin>:576)
==13014== 
==13014== Invalid read of size 8
==13014==    at 0x401A8F: test_explode_XX (<stdin>:361)
==13014==    by 0x4024B8: main (<stdin>:576)
==13014==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==13014== 
==13014== 
==13014== Process terminating with default action of signal 11 (SIGSEGV)
==13014==  Access not within mapped region at address 0x0
==13014==    at 0x401A8F: test_explode_XX (<stdin>:361)
==13014==    by 0x4024B8: main (<stdin>:576)
==13014==  If you believe this happened as a result of a stack
==13014==  overflow in your program's main thread (unlikely but
==13014==  possible), you can try to increase the size of the
==13014==  main thread stack using the --main-stacksize= flag.
==13014==  The main thread stack size used in this run was 10485760.
==13014== 
==13014== HEAP SUMMARY:
==13014==     in use at exit: 9 bytes in 2 blocks
==13014==   total heap usage: 2 allocs, 0 frees, 9 bytes allocated
==13014== 
==13014== Searching for pointers to 2 not-freed blocks
==13014== Checked 64,920 bytes
==13014== 
==13014== LEAK SUMMARY:
==13014==    definitely lost: 0 bytes in 0 blocks
==13014==    indirectly lost: 0 bytes in 0 blocks
==13014==      possibly lost: 0 bytes in 0 blocks
==13014==    still reachable: 9 bytes in 2 blocks
==13014==         suppressed: 0 bytes in 0 blocks
==13014== Reachable blocks (those to which a pointer was found) are not shown.
==13014== To see them, rerun with: --leak-check=full --show-reachable=yes
==13014== 
==13014== Use --track-origins=yes to see where uninitialised values come from
==13014== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 6 from 6)
==13014== 
==13014== 1 errors in context 1 of 8:
==13014== Invalid read of size 8
==13014==    at 0x401A8F: test_explode_XX (<stdin>:361)
==13014==    by 0x4024B8: main (<stdin>:576)
==13014==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==13014== 
==13014== 
==13014== 1 errors in context 2 of 8:
==13014== Conditional jump or move depends on uninitialised value(s)
==13014==    at 0x401A60: test_explode_XX (<stdin>:360)
==13014==    by 0x4024B8: main (<stdin>:576)
==13014== 
==13014== 
==13014== 1 errors in context 3 of 8:
==13014== Conditional jump or move depends on uninitialised value(s)
==13014==    at 0x401B8A: test_explode_XX (<stdin>:359)
==13014==    by 0x4024B8: main (<stdin>:576)
==13014== 
==13014== 
==13014== 1 errors in context 4 of 8:
==13014== Conditional jump or move depends on uninitialised value(s)
==13014==    at 0x3F79E45111: vfprintf (vfprintf.c:1640)
==13014==    by 0x3F79E4F199: printf (printf.c:35)
==13014==    by 0x401961: test_explode_XX (<stdin>:341)
==13014==    by 0x4024B8: main (<stdin>:576)
==13014== 
==13014== 
==13014== 1 errors in context 5 of 8:
==13014== Conditional jump or move depends on uninitialised value(s)
==13014==    at 0x3F79E450F3: vfprintf (vfprintf.c:1640)
==13014==    by 0x3F79E4F199: printf (printf.c:35)
==13014==    by 0x401961: test_explode_XX (<stdin>:341)
==13014==    by 0x4024B8: main (<stdin>:576)
==13014== 
==13014== 
==13014== 1 errors in context 6 of 8:
==13014== Conditional jump or move depends on uninitialised value(s)
==13014==    at 0x3F79E43AB5: _itoa_word (_itoa.c:195)
==13014==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==13014==    by 0x3F79E4F199: printf (printf.c:35)
==13014==    by 0x401961: test_explode_XX (<stdin>:341)
==13014==    by 0x4024B8: main (<stdin>:576)
==13014== 
==13014== 
==13014== 1 errors in context 7 of 8:
==13014== Use of uninitialised value of size 8
==13014==    at 0x3F79E43AAB: _itoa_word (_itoa.c:195)
==13014==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==13014==    by 0x3F79E4F199: printf (printf.c:35)
==13014==    by 0x401961: test_explode_XX (<stdin>:341)
==13014==    by 0x4024B8: main (<stdin>:576)
==13014== 
==13014== 
==13014== 1 errors in context 8 of 8:
==13014== Conditional jump or move depends on uninitialised value(s)
==13014==    at 0x401941: test_explode_XX (<stdin>:340)
==13014==    by 0x4024B8: main (<stdin>:576)
==13014== 
--13014-- 
--13014-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--13014-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==13014== 
==13014== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 6 from 6)

test 11 :: explode(...)

   const char * str = "";
   const char * delims = "";
   int n;
   char * * strArr = explode(std, delims, &n);
   // Error, n = 7, but expected 1
   Testcase FAILED. Printing Solution:
Memory errors detected, testcase failed.
==19429== Memcheck, a memory error detector
==19429== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19429== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19429== Command: /tmp/.11HkrK/a.out 10
==19429== Parent PID: 19428
==19429== 
--19429-- 
--19429-- Valgrind options:
--19429--    --tool=memcheck
--19429--    --leak-check=full
--19429--    --verbose
--19429--    --log-file=memcheck.log
--19429-- Contents of /proc/version:
--19429--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--19429-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--19429-- Page sizes: currently 4096, max supported 4096
--19429-- Valgrind library directory: /usr/lib64/valgrind
--19429-- Reading syms from /tmp/.11HkrK/a.out
--19429-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--19429--    object doesn't have a dynamic symbol table
--19429-- Reading syms from /lib64/ld-2.12.so
--19429--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--19429--   .. build-id is valid
--19429-- Scheduler: using generic scheduler lock implementation.
--19429-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==19429== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-19429-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==19429== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-19429-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==19429== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-19429-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==19429== 
==19429== TO CONTROL THIS PROCESS USING vgdb (which you probably
==19429== don't want to do, unless you know exactly what you're doing,
==19429== or are doing some strange experiment):
==19429==   /usr/lib64/valgrind/../../bin/vgdb --pid=19429 ...command...
==19429== 
==19429== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==19429==   /path/to/gdb /tmp/.11HkrK/a.out
==19429== and then give GDB the following command
==19429==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=19429
==19429== --pid is optional if only one valgrind process is running
==19429== 
--19429-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--19429-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--19429-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--19429-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--19429-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--19429-- Reading syms from /lib64/libc-2.12.so
--19429--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--19429--   .. build-id is valid
--19429-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--19429-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--19429-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--19429-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--19429-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--19429-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
--19429-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--19429-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--19429-- REDIR: 0x3f79e89670 (memcpy) redirected to 0x4a08b20 (memcpy)
==19429== Conditional jump or move depends on uninitialised value(s)
==19429==    at 0x401941: test_explode_XX (<stdin>:340)
==19429==    by 0x4024D1: main (<stdin>:577)
==19429== 
==19429== Use of uninitialised value of size 8
==19429==    at 0x3F79E43AAB: _itoa_word (_itoa.c:195)
==19429==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==19429==    by 0x3F79E4F199: printf (printf.c:35)
==19429==    by 0x401961: test_explode_XX (<stdin>:341)
==19429==    by 0x4024D1: main (<stdin>:577)
==19429== 
==19429== Conditional jump or move depends on uninitialised value(s)
==19429==    at 0x3F79E43AB5: _itoa_word (_itoa.c:195)
==19429==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==19429==    by 0x3F79E4F199: printf (printf.c:35)
==19429==    by 0x401961: test_explode_XX (<stdin>:341)
==19429==    by 0x4024D1: main (<stdin>:577)
==19429== 
==19429== Conditional jump or move depends on uninitialised value(s)
==19429==    at 0x3F79E450F3: vfprintf (vfprintf.c:1640)
==19429==    by 0x3F79E4F199: printf (printf.c:35)
==19429==    by 0x401961: test_explode_XX (<stdin>:341)
==19429==    by 0x4024D1: main (<stdin>:577)
==19429== 
==19429== Conditional jump or move depends on uninitialised value(s)
==19429==    at 0x3F79E45111: vfprintf (vfprintf.c:1640)
==19429==    by 0x3F79E4F199: printf (printf.c:35)
==19429==    by 0x401961: test_explode_XX (<stdin>:341)
==19429==    by 0x4024D1: main (<stdin>:577)
==19429== 
==19429== Conditional jump or move depends on uninitialised value(s)
==19429==    at 0x401B8A: test_explode_XX (<stdin>:359)
==19429==    by 0x4024D1: main (<stdin>:577)
==19429== 
==19429== Conditional jump or move depends on uninitialised value(s)
==19429==    at 0x401A60: test_explode_XX (<stdin>:360)
==19429==    by 0x4024D1: main (<stdin>:577)
==19429== 
==19429== Invalid read of size 8
==19429==    at 0x401A8F: test_explode_XX (<stdin>:361)
==19429==    by 0x4024D1: main (<stdin>:577)
==19429==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==19429== 
==19429== 
==19429== Process terminating with default action of signal 11 (SIGSEGV)
==19429==  Access not within mapped region at address 0x0
==19429==    at 0x401A8F: test_explode_XX (<stdin>:361)
==19429==    by 0x4024D1: main (<stdin>:577)
==19429==  If you believe this happened as a result of a stack
==19429==  overflow in your program's main thread (unlikely but
==19429==  possible), you can try to increase the size of the
==19429==  main thread stack using the --main-stacksize= flag.
==19429==  The main thread stack size used in this run was 10485760.
==19429== 
==19429== HEAP SUMMARY:
==19429==     in use at exit: 9 bytes in 2 blocks
==19429==   total heap usage: 2 allocs, 0 frees, 9 bytes allocated
==19429== 
==19429== Searching for pointers to 2 not-freed blocks
==19429== Checked 64,920 bytes
==19429== 
==19429== LEAK SUMMARY:
==19429==    definitely lost: 0 bytes in 0 blocks
==19429==    indirectly lost: 0 bytes in 0 blocks
==19429==      possibly lost: 0 bytes in 0 blocks
==19429==    still reachable: 9 bytes in 2 blocks
==19429==         suppressed: 0 bytes in 0 blocks
==19429== Reachable blocks (those to which a pointer was found) are not shown.
==19429== To see them, rerun with: --leak-check=full --show-reachable=yes
==19429== 
==19429== Use --track-origins=yes to see where uninitialised values come from
==19429== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 6 from 6)
==19429== 
==19429== 1 errors in context 1 of 8:
==19429== Invalid read of size 8
==19429==    at 0x401A8F: test_explode_XX (<stdin>:361)
==19429==    by 0x4024D1: main (<stdin>:577)
==19429==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==19429== 
==19429== 
==19429== 1 errors in context 2 of 8:
==19429== Conditional jump or move depends on uninitialised value(s)
==19429==    at 0x401A60: test_explode_XX (<stdin>:360)
==19429==    by 0x4024D1: main (<stdin>:577)
==19429== 
==19429== 
==19429== 1 errors in context 3 of 8:
==19429== Conditional jump or move depends on uninitialised value(s)
==19429==    at 0x401B8A: test_explode_XX (<stdin>:359)
==19429==    by 0x4024D1: main (<stdin>:577)
==19429== 
==19429== 
==19429== 1 errors in context 4 of 8:
==19429== Conditional jump or move depends on uninitialised value(s)
==19429==    at 0x3F79E45111: vfprintf (vfprintf.c:1640)
==19429==    by 0x3F79E4F199: printf (printf.c:35)
==19429==    by 0x401961: test_explode_XX (<stdin>:341)
==19429==    by 0x4024D1: main (<stdin>:577)
==19429== 
==19429== 
==19429== 1 errors in context 5 of 8:
==19429== Conditional jump or move depends on uninitialised value(s)
==19429==    at 0x3F79E450F3: vfprintf (vfprintf.c:1640)
==19429==    by 0x3F79E4F199: printf (printf.c:35)
==19429==    by 0x401961: test_explode_XX (<stdin>:341)
==19429==    by 0x4024D1: main (<stdin>:577)
==19429== 
==19429== 
==19429== 1 errors in context 6 of 8:
==19429== Conditional jump or move depends on uninitialised value(s)
==19429==    at 0x3F79E43AB5: _itoa_word (_itoa.c:195)
==19429==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==19429==    by 0x3F79E4F199: printf (printf.c:35)
==19429==    by 0x401961: test_explode_XX (<stdin>:341)
==19429==    by 0x4024D1: main (<stdin>:577)
==19429== 
==19429== 
==19429== 1 errors in context 7 of 8:
==19429== Use of uninitialised value of size 8
==19429==    at 0x3F79E43AAB: _itoa_word (_itoa.c:195)
==19429==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==19429==    by 0x3F79E4F199: printf (printf.c:35)
==19429==    by 0x401961: test_explode_XX (<stdin>:341)
==19429==    by 0x4024D1: main (<stdin>:577)
==19429== 
==19429== 
==19429== 1 errors in context 8 of 8:
==19429== Conditional jump or move depends on uninitialised value(s)
==19429==    at 0x401941: test_explode_XX (<stdin>:340)
==19429==    by 0x4024D1: main (<stdin>:577)
==19429== 
--19429-- 
--19429-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--19429-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==19429== 
==19429== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 6 from 6)

test 12 :: explode(...)

   const char * str = "The more that you read, the more things you will know. The more that you learn, the more places you\'ll go.";
   const char * delims = " ,;.";
   int n;
   char * * strArr = explode(std, delims, &n);
   // Error, n = 7, but expected 25
   Testcase FAILED. Printing Solution:
Memory errors detected, testcase failed.
==26027== Memcheck, a memory error detector
==26027== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==26027== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==26027== Command: /tmp/.11HkrK/a.out 11
==26027== Parent PID: 26025
==26027== 
--26027-- 
--26027-- Valgrind options:
--26027--    --tool=memcheck
--26027--    --leak-check=full
--26027--    --verbose
--26027--    --log-file=memcheck.log
--26027-- Contents of /proc/version:
--26027--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--26027-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--26027-- Page sizes: currently 4096, max supported 4096
--26027-- Valgrind library directory: /usr/lib64/valgrind
--26027-- Reading syms from /tmp/.11HkrK/a.out
--26027-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--26027--    object doesn't have a dynamic symbol table
--26027-- Reading syms from /lib64/ld-2.12.so
--26027--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--26027--   .. build-id is valid
--26027-- Scheduler: using generic scheduler lock implementation.
--26027-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==26027== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-26027-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==26027== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-26027-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==26027== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-26027-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==26027== 
==26027== TO CONTROL THIS PROCESS USING vgdb (which you probably
==26027== don't want to do, unless you know exactly what you're doing,
==26027== or are doing some strange experiment):
==26027==   /usr/lib64/valgrind/../../bin/vgdb --pid=26027 ...command...
==26027== 
==26027== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==26027==   /path/to/gdb /tmp/.11HkrK/a.out
==26027== and then give GDB the following command
==26027==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=26027
==26027== --pid is optional if only one valgrind process is running
==26027== 
--26027-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--26027-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--26027-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--26027-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--26027-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--26027-- Reading syms from /lib64/libc-2.12.so
--26027--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--26027--   .. build-id is valid
--26027-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--26027-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--26027-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--26027-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--26027-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--26027-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
--26027-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--26027-- REDIR: 0x3f79e7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--26027-- REDIR: 0x3f79f281e0 (__strchr_sse42) redirected to 0x4a07b00 (index)
--26027-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--26027-- REDIR: 0x3f79e89670 (memcpy) redirected to 0x4a08b20 (memcpy)
==26027== Conditional jump or move depends on uninitialised value(s)
==26027==    at 0x401941: test_explode_XX (<stdin>:340)
==26027==    by 0x4024EF: main (<stdin>:578)
==26027== 
==26027== Use of uninitialised value of size 8
==26027==    at 0x3F79E43AAB: _itoa_word (_itoa.c:195)
==26027==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==26027==    by 0x3F79E4F199: printf (printf.c:35)
==26027==    by 0x401961: test_explode_XX (<stdin>:341)
==26027==    by 0x4024EF: main (<stdin>:578)
==26027== 
==26027== Conditional jump or move depends on uninitialised value(s)
==26027==    at 0x3F79E43AB5: _itoa_word (_itoa.c:195)
==26027==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==26027==    by 0x3F79E4F199: printf (printf.c:35)
==26027==    by 0x401961: test_explode_XX (<stdin>:341)
==26027==    by 0x4024EF: main (<stdin>:578)
==26027== 
==26027== Conditional jump or move depends on uninitialised value(s)
==26027==    at 0x3F79E450F3: vfprintf (vfprintf.c:1640)
==26027==    by 0x3F79E4F199: printf (printf.c:35)
==26027==    by 0x401961: test_explode_XX (<stdin>:341)
==26027==    by 0x4024EF: main (<stdin>:578)
==26027== 
==26027== Conditional jump or move depends on uninitialised value(s)
==26027==    at 0x3F79E45111: vfprintf (vfprintf.c:1640)
==26027==    by 0x3F79E4F199: printf (printf.c:35)
==26027==    by 0x401961: test_explode_XX (<stdin>:341)
==26027==    by 0x4024EF: main (<stdin>:578)
==26027== 
==26027== Conditional jump or move depends on uninitialised value(s)
==26027==    at 0x401B8A: test_explode_XX (<stdin>:359)
==26027==    by 0x4024EF: main (<stdin>:578)
==26027== 
==26027== Conditional jump or move depends on uninitialised value(s)
==26027==    at 0x401A60: test_explode_XX (<stdin>:360)
==26027==    by 0x4024EF: main (<stdin>:578)
==26027== 
==26027== Invalid read of size 8
==26027==    at 0x401A8F: test_explode_XX (<stdin>:361)
==26027==    by 0x4024EF: main (<stdin>:578)
==26027==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==26027== 
==26027== 
==26027== Process terminating with default action of signal 11 (SIGSEGV)
==26027==  Access not within mapped region at address 0x0
==26027==    at 0x401A8F: test_explode_XX (<stdin>:361)
==26027==    by 0x4024EF: main (<stdin>:578)
==26027==  If you believe this happened as a result of a stack
==26027==  overflow in your program's main thread (unlikely but
==26027==  possible), you can try to increase the size of the
==26027==  main thread stack using the --main-stacksize= flag.
==26027==  The main thread stack size used in this run was 10485760.
==26027== 
==26027== HEAP SUMMARY:
==26027==     in use at exit: 307 bytes in 26 blocks
==26027==   total heap usage: 26 allocs, 0 frees, 307 bytes allocated
==26027== 
==26027== Searching for pointers to 26 not-freed blocks
==26027== Checked 65,112 bytes
==26027== 
==26027== LEAK SUMMARY:
==26027==    definitely lost: 0 bytes in 0 blocks
==26027==    indirectly lost: 0 bytes in 0 blocks
==26027==      possibly lost: 0 bytes in 0 blocks
==26027==    still reachable: 307 bytes in 26 blocks
==26027==         suppressed: 0 bytes in 0 blocks
==26027== Reachable blocks (those to which a pointer was found) are not shown.
==26027== To see them, rerun with: --leak-check=full --show-reachable=yes
==26027== 
==26027== Use --track-origins=yes to see where uninitialised values come from
==26027== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 6 from 6)
==26027== 
==26027== 1 errors in context 1 of 8:
==26027== Invalid read of size 8
==26027==    at 0x401A8F: test_explode_XX (<stdin>:361)
==26027==    by 0x4024EF: main (<stdin>:578)
==26027==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==26027== 
==26027== 
==26027== 1 errors in context 2 of 8:
==26027== Conditional jump or move depends on uninitialised value(s)
==26027==    at 0x401A60: test_explode_XX (<stdin>:360)
==26027==    by 0x4024EF: main (<stdin>:578)
==26027== 
==26027== 
==26027== 1 errors in context 3 of 8:
==26027== Conditional jump or move depends on uninitialised value(s)
==26027==    at 0x401B8A: test_explode_XX (<stdin>:359)
==26027==    by 0x4024EF: main (<stdin>:578)
==26027== 
==26027== 
==26027== 1 errors in context 4 of 8:
==26027== Conditional jump or move depends on uninitialised value(s)
==26027==    at 0x3F79E45111: vfprintf (vfprintf.c:1640)
==26027==    by 0x3F79E4F199: printf (printf.c:35)
==26027==    by 0x401961: test_explode_XX (<stdin>:341)
==26027==    by 0x4024EF: main (<stdin>:578)
==26027== 
==26027== 
==26027== 1 errors in context 5 of 8:
==26027== Conditional jump or move depends on uninitialised value(s)
==26027==    at 0x3F79E450F3: vfprintf (vfprintf.c:1640)
==26027==    by 0x3F79E4F199: printf (printf.c:35)
==26027==    by 0x401961: test_explode_XX (<stdin>:341)
==26027==    by 0x4024EF: main (<stdin>:578)
==26027== 
==26027== 
==26027== 1 errors in context 6 of 8:
==26027== Conditional jump or move depends on uninitialised value(s)
==26027==    at 0x3F79E43AB5: _itoa_word (_itoa.c:195)
==26027==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==26027==    by 0x3F79E4F199: printf (printf.c:35)
==26027==    by 0x401961: test_explode_XX (<stdin>:341)
==26027==    by 0x4024EF: main (<stdin>:578)
==26027== 
==26027== 
==26027== 1 errors in context 7 of 8:
==26027== Use of uninitialised value of size 8
==26027==    at 0x3F79E43AAB: _itoa_word (_itoa.c:195)
==26027==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==26027==    by 0x3F79E4F199: printf (printf.c:35)
==26027==    by 0x401961: test_explode_XX (<stdin>:341)
==26027==    by 0x4024EF: main (<stdin>:578)
==26027== 
==26027== 
==26027== 1 errors in context 8 of 8:
==26027== Conditional jump or move depends on uninitialised value(s)
==26027==    at 0x401941: test_explode_XX (<stdin>:340)
==26027==    by 0x4024EF: main (<stdin>:578)
==26027== 
--26027-- 
--26027-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--26027-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==26027== 
==26027== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 6 from 6)

test 13 :: explode(...)

   const char * str = "Twas brillig, and the slithy toves\nDid gyre and gimble in the wabe:\nAll mimsy were the borogoves,\nAnd the mome raths outgrabe.\n\nBeware the Jabberwock, my son!\nThe jaws that bite, the claws that catch!\nBeware the Jubjub bird, and shun\nThe frumious Bandersnatch!\n\nHe took his vorpal sword in hand:\nLong time the manxome foe he sought --\nSo rested he by the Tumtum tree,\nAnd stood awhile in thought.\n\nAnd, as in uffish thought he stood,\nThe Jabberwock, with eyes of flame,\nCame whiffling through the tulgey wood,\nAnd burbled as it came!\n\nOne, two! One, two! And through and through\nThe vorpal blade went snicker-snack!\nHe left it dead, and with its head\nHe went galumphing back.\n\nAnd, has thou slain the Jabberwock?\nCome to my arms, my beamish boy!\nO frabjous day! Callooh! Callay!\nHe chortled in his joy.\n\nTwas brillig, and the slithy toves\nDid gyre and gimble in the wabe;\nAll mimsy were the borogoves,\nAnd the mome raths outgrabe.\n";
   const char * delims = "\n";
   int n;
   char * * strArr = explode(std, delims, &n);
   // Error, n = 7, but expected 35
   Testcase FAILED. Printing Solution:
Memory errors detected, testcase failed.
==32208== Memcheck, a memory error detector
==32208== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==32208== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==32208== Command: /tmp/.11HkrK/a.out 12
==32208== Parent PID: 32206
==32208== 
--32208-- 
--32208-- Valgrind options:
--32208--    --tool=memcheck
--32208--    --leak-check=full
--32208--    --verbose
--32208--    --log-file=memcheck.log
--32208-- Contents of /proc/version:
--32208--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--32208-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--32208-- Page sizes: currently 4096, max supported 4096
--32208-- Valgrind library directory: /usr/lib64/valgrind
--32208-- Reading syms from /tmp/.11HkrK/a.out
--32208-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--32208--    object doesn't have a dynamic symbol table
--32208-- Reading syms from /lib64/ld-2.12.so
--32208--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--32208--   .. build-id is valid
--32208-- Scheduler: using generic scheduler lock implementation.
--32208-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==32208== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-32208-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==32208== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-32208-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==32208== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-32208-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==32208== 
==32208== TO CONTROL THIS PROCESS USING vgdb (which you probably
==32208== don't want to do, unless you know exactly what you're doing,
==32208== or are doing some strange experiment):
==32208==   /usr/lib64/valgrind/../../bin/vgdb --pid=32208 ...command...
==32208== 
==32208== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==32208==   /path/to/gdb /tmp/.11HkrK/a.out
==32208== and then give GDB the following command
==32208==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=32208
==32208== --pid is optional if only one valgrind process is running
==32208== 
--32208-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--32208-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--32208-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--32208-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--32208-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--32208-- Reading syms from /lib64/libc-2.12.so
--32208--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--32208--   .. build-id is valid
--32208-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--32208-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--32208-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--32208-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--32208-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--32208-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
--32208-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--32208-- REDIR: 0x3f79e7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--32208-- REDIR: 0x3f79f281e0 (__strchr_sse42) redirected to 0x4a07b00 (index)
--32208-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--32208-- REDIR: 0x3f79e89670 (memcpy) redirected to 0x4a08b20 (memcpy)
==32208== Conditional jump or move depends on uninitialised value(s)
==32208==    at 0x401941: test_explode_XX (<stdin>:340)
==32208==    by 0x40250D: main (<stdin>:579)
==32208== 
==32208== Use of uninitialised value of size 8
==32208==    at 0x3F79E43AAB: _itoa_word (_itoa.c:195)
==32208==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==32208==    by 0x3F79E4F199: printf (printf.c:35)
==32208==    by 0x401961: test_explode_XX (<stdin>:341)
==32208==    by 0x40250D: main (<stdin>:579)
==32208== 
==32208== Conditional jump or move depends on uninitialised value(s)
==32208==    at 0x3F79E43AB5: _itoa_word (_itoa.c:195)
==32208==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==32208==    by 0x3F79E4F199: printf (printf.c:35)
==32208==    by 0x401961: test_explode_XX (<stdin>:341)
==32208==    by 0x40250D: main (<stdin>:579)
==32208== 
==32208== Conditional jump or move depends on uninitialised value(s)
==32208==    at 0x3F79E450F3: vfprintf (vfprintf.c:1640)
==32208==    by 0x3F79E4F199: printf (printf.c:35)
==32208==    by 0x401961: test_explode_XX (<stdin>:341)
==32208==    by 0x40250D: main (<stdin>:579)
==32208== 
==32208== Conditional jump or move depends on uninitialised value(s)
==32208==    at 0x3F79E45111: vfprintf (vfprintf.c:1640)
==32208==    by 0x3F79E4F199: printf (printf.c:35)
==32208==    by 0x401961: test_explode_XX (<stdin>:341)
==32208==    by 0x40250D: main (<stdin>:579)
==32208== 
==32208== Conditional jump or move depends on uninitialised value(s)
==32208==    at 0x401B8A: test_explode_XX (<stdin>:359)
==32208==    by 0x40250D: main (<stdin>:579)
==32208== 
==32208== Conditional jump or move depends on uninitialised value(s)
==32208==    at 0x401A60: test_explode_XX (<stdin>:360)
==32208==    by 0x40250D: main (<stdin>:579)
==32208== 
==32208== Invalid read of size 8
==32208==    at 0x401A8F: test_explode_XX (<stdin>:361)
==32208==    by 0x40250D: main (<stdin>:579)
==32208==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==32208== 
==32208== 
==32208== Process terminating with default action of signal 11 (SIGSEGV)
==32208==  Access not within mapped region at address 0x0
==32208==    at 0x401A8F: test_explode_XX (<stdin>:361)
==32208==    by 0x40250D: main (<stdin>:579)
==32208==  If you believe this happened as a result of a stack
==32208==  overflow in your program's main thread (unlikely but
==32208==  possible), you can try to increase the size of the
==32208==  main thread stack using the --main-stacksize= flag.
==32208==  The main thread stack size used in this run was 10485760.
==32208== 
==32208== HEAP SUMMARY:
==32208==     in use at exit: 1,212 bytes in 36 blocks
==32208==   total heap usage: 36 allocs, 0 frees, 1,212 bytes allocated
==32208== 
==32208== Searching for pointers to 36 not-freed blocks
==32208== Checked 66,032 bytes
==32208== 
==32208== LEAK SUMMARY:
==32208==    definitely lost: 0 bytes in 0 blocks
==32208==    indirectly lost: 0 bytes in 0 blocks
==32208==      possibly lost: 0 bytes in 0 blocks
==32208==    still reachable: 1,212 bytes in 36 blocks
==32208==         suppressed: 0 bytes in 0 blocks
==32208== Reachable blocks (those to which a pointer was found) are not shown.
==32208== To see them, rerun with: --leak-check=full --show-reachable=yes
==32208== 
==32208== Use --track-origins=yes to see where uninitialised values come from
==32208== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 6 from 6)
==32208== 
==32208== 1 errors in context 1 of 8:
==32208== Invalid read of size 8
==32208==    at 0x401A8F: test_explode_XX (<stdin>:361)
==32208==    by 0x40250D: main (<stdin>:579)
==32208==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==32208== 
==32208== 
==32208== 1 errors in context 2 of 8:
==32208== Conditional jump or move depends on uninitialised value(s)
==32208==    at 0x401A60: test_explode_XX (<stdin>:360)
==32208==    by 0x40250D: main (<stdin>:579)
==32208== 
==32208== 
==32208== 1 errors in context 3 of 8:
==32208== Conditional jump or move depends on uninitialised value(s)
==32208==    at 0x401B8A: test_explode_XX (<stdin>:359)
==32208==    by 0x40250D: main (<stdin>:579)
==32208== 
==32208== 
==32208== 1 errors in context 4 of 8:
==32208== Conditional jump or move depends on uninitialised value(s)
==32208==    at 0x3F79E45111: vfprintf (vfprintf.c:1640)
==32208==    by 0x3F79E4F199: printf (printf.c:35)
==32208==    by 0x401961: test_explode_XX (<stdin>:341)
==32208==    by 0x40250D: main (<stdin>:579)
==32208== 
==32208== 
==32208== 1 errors in context 5 of 8:
==32208== Conditional jump or move depends on uninitialised value(s)
==32208==    at 0x3F79E450F3: vfprintf (vfprintf.c:1640)
==32208==    by 0x3F79E4F199: printf (printf.c:35)
==32208==    by 0x401961: test_explode_XX (<stdin>:341)
==32208==    by 0x40250D: main (<stdin>:579)
==32208== 
==32208== 
==32208== 1 errors in context 6 of 8:
==32208== Conditional jump or move depends on uninitialised value(s)
==32208==    at 0x3F79E43AB5: _itoa_word (_itoa.c:195)
==32208==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==32208==    by 0x3F79E4F199: printf (printf.c:35)
==32208==    by 0x401961: test_explode_XX (<stdin>:341)
==32208==    by 0x40250D: main (<stdin>:579)
==32208== 
==32208== 
==32208== 1 errors in context 7 of 8:
==32208== Use of uninitialised value of size 8
==32208==    at 0x3F79E43AAB: _itoa_word (_itoa.c:195)
==32208==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==32208==    by 0x3F79E4F199: printf (printf.c:35)
==32208==    by 0x401961: test_explode_XX (<stdin>:341)
==32208==    by 0x40250D: main (<stdin>:579)
==32208== 
==32208== 
==32208== 1 errors in context 8 of 8:
==32208== Conditional jump or move depends on uninitialised value(s)
==32208==    at 0x401941: test_explode_XX (<stdin>:340)
==32208==    by 0x40250D: main (<stdin>:579)
==32208== 
--32208-- 
--32208-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--32208-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==32208== 
==32208== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 6 from 6)

test 14 :: explode(...)

   const char * str = "aaaaa";
   const char * delims = "a";
   int n;
   char * * strArr = explode(std, delims, &n);
   // Error, n = 7, but expected 6
   Testcase FAILED. Printing Solution:
Memory errors detected, testcase failed.
==6197== Memcheck, a memory error detector
==6197== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==6197== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==6197== Command: /tmp/.11HkrK/a.out 13
==6197== Parent PID: 6195
==6197== 
--6197-- 
--6197-- Valgrind options:
--6197--    --tool=memcheck
--6197--    --leak-check=full
--6197--    --verbose
--6197--    --log-file=memcheck.log
--6197-- Contents of /proc/version:
--6197--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--6197-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--6197-- Page sizes: currently 4096, max supported 4096
--6197-- Valgrind library directory: /usr/lib64/valgrind
--6197-- Reading syms from /tmp/.11HkrK/a.out
--6197-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--6197--    object doesn't have a dynamic symbol table
--6197-- Reading syms from /lib64/ld-2.12.so
--6197--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--6197--   .. build-id is valid
--6197-- Scheduler: using generic scheduler lock implementation.
--6197-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==6197== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-6197-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==6197== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-6197-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==6197== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-6197-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==6197== 
==6197== TO CONTROL THIS PROCESS USING vgdb (which you probably
==6197== don't want to do, unless you know exactly what you're doing,
==6197== or are doing some strange experiment):
==6197==   /usr/lib64/valgrind/../../bin/vgdb --pid=6197 ...command...
==6197== 
==6197== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==6197==   /path/to/gdb /tmp/.11HkrK/a.out
==6197== and then give GDB the following command
==6197==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=6197
==6197== --pid is optional if only one valgrind process is running
==6197== 
--6197-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--6197-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--6197-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--6197-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--6197-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--6197-- Reading syms from /lib64/libc-2.12.so
--6197--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--6197--   .. build-id is valid
--6197-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--6197-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--6197-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--6197-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--6197-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--6197-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
--6197-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--6197-- REDIR: 0x3f79e7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--6197-- REDIR: 0x3f79f281e0 (__strchr_sse42) redirected to 0x4a07b00 (index)
--6197-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--6197-- REDIR: 0x3f79e89670 (memcpy) redirected to 0x4a08b20 (memcpy)
==6197== Conditional jump or move depends on uninitialised value(s)
==6197==    at 0x401941: test_explode_XX (<stdin>:340)
==6197==    by 0x402526: main (<stdin>:580)
==6197== 
==6197== Use of uninitialised value of size 8
==6197==    at 0x3F79E43AAB: _itoa_word (_itoa.c:195)
==6197==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==6197==    by 0x3F79E4F199: printf (printf.c:35)
==6197==    by 0x401961: test_explode_XX (<stdin>:341)
==6197==    by 0x402526: main (<stdin>:580)
==6197== 
==6197== Conditional jump or move depends on uninitialised value(s)
==6197==    at 0x3F79E43AB5: _itoa_word (_itoa.c:195)
==6197==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==6197==    by 0x3F79E4F199: printf (printf.c:35)
==6197==    by 0x401961: test_explode_XX (<stdin>:341)
==6197==    by 0x402526: main (<stdin>:580)
==6197== 
==6197== Conditional jump or move depends on uninitialised value(s)
==6197==    at 0x3F79E450F3: vfprintf (vfprintf.c:1640)
==6197==    by 0x3F79E4F199: printf (printf.c:35)
==6197==    by 0x401961: test_explode_XX (<stdin>:341)
==6197==    by 0x402526: main (<stdin>:580)
==6197== 
==6197== Conditional jump or move depends on uninitialised value(s)
==6197==    at 0x3F79E45111: vfprintf (vfprintf.c:1640)
==6197==    by 0x3F79E4F199: printf (printf.c:35)
==6197==    by 0x401961: test_explode_XX (<stdin>:341)
==6197==    by 0x402526: main (<stdin>:580)
==6197== 
==6197== Conditional jump or move depends on uninitialised value(s)
==6197==    at 0x401B8A: test_explode_XX (<stdin>:359)
==6197==    by 0x402526: main (<stdin>:580)
==6197== 
==6197== Conditional jump or move depends on uninitialised value(s)
==6197==    at 0x401A60: test_explode_XX (<stdin>:360)
==6197==    by 0x402526: main (<stdin>:580)
==6197== 
==6197== Invalid read of size 8
==6197==    at 0x401A8F: test_explode_XX (<stdin>:361)
==6197==    by 0x402526: main (<stdin>:580)
==6197==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==6197== 
==6197== 
==6197== Process terminating with default action of signal 11 (SIGSEGV)
==6197==  Access not within mapped region at address 0x0
==6197==    at 0x401A8F: test_explode_XX (<stdin>:361)
==6197==    by 0x402526: main (<stdin>:580)
==6197==  If you believe this happened as a result of a stack
==6197==  overflow in your program's main thread (unlikely but
==6197==  possible), you can try to increase the size of the
==6197==  main thread stack using the --main-stacksize= flag.
==6197==  The main thread stack size used in this run was 10485760.
==6197== 
==6197== HEAP SUMMARY:
==6197==     in use at exit: 54 bytes in 7 blocks
==6197==   total heap usage: 7 allocs, 0 frees, 54 bytes allocated
==6197== 
==6197== Searching for pointers to 7 not-freed blocks
==6197== Checked 64,960 bytes
==6197== 
==6197== LEAK SUMMARY:
==6197==    definitely lost: 0 bytes in 0 blocks
==6197==    indirectly lost: 0 bytes in 0 blocks
==6197==      possibly lost: 0 bytes in 0 blocks
==6197==    still reachable: 54 bytes in 7 blocks
==6197==         suppressed: 0 bytes in 0 blocks
==6197== Reachable blocks (those to which a pointer was found) are not shown.
==6197== To see them, rerun with: --leak-check=full --show-reachable=yes
==6197== 
==6197== Use --track-origins=yes to see where uninitialised values come from
==6197== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 6 from 6)
==6197== 
==6197== 1 errors in context 1 of 8:
==6197== Invalid read of size 8
==6197==    at 0x401A8F: test_explode_XX (<stdin>:361)
==6197==    by 0x402526: main (<stdin>:580)
==6197==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==6197== 
==6197== 
==6197== 1 errors in context 2 of 8:
==6197== Conditional jump or move depends on uninitialised value(s)
==6197==    at 0x401A60: test_explode_XX (<stdin>:360)
==6197==    by 0x402526: main (<stdin>:580)
==6197== 
==6197== 
==6197== 1 errors in context 3 of 8:
==6197== Conditional jump or move depends on uninitialised value(s)
==6197==    at 0x401B8A: test_explode_XX (<stdin>:359)
==6197==    by 0x402526: main (<stdin>:580)
==6197== 
==6197== 
==6197== 1 errors in context 4 of 8:
==6197== Conditional jump or move depends on uninitialised value(s)
==6197==    at 0x3F79E45111: vfprintf (vfprintf.c:1640)
==6197==    by 0x3F79E4F199: printf (printf.c:35)
==6197==    by 0x401961: test_explode_XX (<stdin>:341)
==6197==    by 0x402526: main (<stdin>:580)
==6197== 
==6197== 
==6197== 1 errors in context 5 of 8:
==6197== Conditional jump or move depends on uninitialised value(s)
==6197==    at 0x3F79E450F3: vfprintf (vfprintf.c:1640)
==6197==    by 0x3F79E4F199: printf (printf.c:35)
==6197==    by 0x401961: test_explode_XX (<stdin>:341)
==6197==    by 0x402526: main (<stdin>:580)
==6197== 
==6197== 
==6197== 1 errors in context 6 of 8:
==6197== Conditional jump or move depends on uninitialised value(s)
==6197==    at 0x3F79E43AB5: _itoa_word (_itoa.c:195)
==6197==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==6197==    by 0x3F79E4F199: printf (printf.c:35)
==6197==    by 0x401961: test_explode_XX (<stdin>:341)
==6197==    by 0x402526: main (<stdin>:580)
==6197== 
==6197== 
==6197== 1 errors in context 7 of 8:
==6197== Use of uninitialised value of size 8
==6197==    at 0x3F79E43AAB: _itoa_word (_itoa.c:195)
==6197==    by 0x3F79E46662: vfprintf (vfprintf.c:1640)
==6197==    by 0x3F79E4F199: printf (printf.c:35)
==6197==    by 0x401961: test_explode_XX (<stdin>:341)
==6197==    by 0x402526: main (<stdin>:580)
==6197== 
==6197== 
==6197== 1 errors in context 8 of 8:
==6197== Conditional jump or move depends on uninitialised value(s)
==6197==    at 0x401941: test_explode_XX (<stdin>:340)
==6197==    by 0x402526: main (<stdin>:580)
==6197== 
--6197-- 
--6197-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--6197-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==6197== 
==6197== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 6 from 6)

test 15 :: implode(...)

   int len = 3
   char * * strArr = malloc(len * sizeof(char*));
   strArr[0] = strdup("The");
   strArr[1] = strdup("Turing");
   strArr[2] = strdup("test");
   const char * glue = " ";
   char * s = implode(strArr, len, glue);
   // s is "Memory errors detected, testcase failed.
==12899== Memcheck, a memory error detector
==12899== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==12899== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==12899== Command: /tmp/.11HkrK/a.out 14
==12899== Parent PID: 12896
==12899== 
--12899-- 
--12899-- Valgrind options:
--12899--    --tool=memcheck
--12899--    --leak-check=full
--12899--    --verbose
--12899--    --log-file=memcheck.log
--12899-- Contents of /proc/version:
--12899--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--12899-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--12899-- Page sizes: currently 4096, max supported 4096
--12899-- Valgrind library directory: /usr/lib64/valgrind
--12899-- Reading syms from /tmp/.11HkrK/a.out
--12899-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--12899--    object doesn't have a dynamic symbol table
--12899-- Reading syms from /lib64/ld-2.12.so
--12899--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--12899--   .. build-id is valid
--12899-- Scheduler: using generic scheduler lock implementation.
--12899-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==12899== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-12899-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==12899== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-12899-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==12899== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-12899-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==12899== 
==12899== TO CONTROL THIS PROCESS USING vgdb (which you probably
==12899== don't want to do, unless you know exactly what you're doing,
==12899== or are doing some strange experiment):
==12899==   /usr/lib64/valgrind/../../bin/vgdb --pid=12899 ...command...
==12899== 
==12899== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==12899==   /path/to/gdb /tmp/.11HkrK/a.out
==12899== and then give GDB the following command
==12899==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=12899
==12899== --pid is optional if only one valgrind process is running
==12899== 
--12899-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--12899-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--12899-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--12899-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--12899-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--12899-- Reading syms from /lib64/libc-2.12.so
--12899--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--12899--   .. build-id is valid
--12899-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--12899-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--12899-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--12899-- REDIR: 0x3f79e7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--12899-- REDIR: 0x3f79f281e0 (__strchr_sse42) redirected to 0x4a07b00 (index)
--12899-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--12899-- REDIR: 0x3f79e89670 (memcpy) redirected to 0x4a08b20 (memcpy)
--12899-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--12899-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--12899-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--12899-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
--12899-- REDIR: 0x3f79e81120 (strlen) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--12899-- REDIR: 0x3f79f33560 (__strlen_sse42) redirected to 0x4a07f50 (strlen)
--12899-- REDIR: 0x3f79e7f470 (strcat) redirected to 0x4a07c20 (strcat)
--12899-- REDIR: 0x3f79e80b70 (strcpy) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--12899-- REDIR: 0x3f79f34000 (???) redirected to 0x4a07f90 (strcpy)
==12899== Invalid read of size 1
==12899==    at 0x400B17: print_packed (<stdin>:14)
==12899==    by 0x401D6F: test_implode_XX (<stdin>:416)
==12899==    by 0x402544: main (<stdin>:581)
==12899==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==12899== 
==12899== 
==12899== Process terminating with default action of signal 11 (SIGSEGV)
==12899==  Access not within mapped region at address 0x0
==12899==    at 0x400B17: print_packed (<stdin>:14)
==12899==    by 0x401D6F: test_implode_XX (<stdin>:416)
==12899==    by 0x402544: main (<stdin>:581)
==12899==  If you believe this happened as a result of a stack
==12899==  overflow in your program's main thread (unlikely but
==12899==  possible), you can try to increase the size of the
==12899==  main thread stack using the --main-stacksize= flag.
==12899==  The main thread stack size used in this run was 10485760.
==12899== 
==12899== HEAP SUMMARY:
==12899==     in use at exit: 85 bytes in 6 blocks
==12899==   total heap usage: 7 allocs, 1 frees, 92 bytes allocated
==12899== 
==12899== Searching for pointers to 6 not-freed blocks
==12899== Checked 65,016 bytes
==12899== 
==12899== LEAK SUMMARY:
==12899==    definitely lost: 0 bytes in 0 blocks
==12899==    indirectly lost: 0 bytes in 0 blocks
==12899==      possibly lost: 0 bytes in 0 blocks
==12899==    still reachable: 85 bytes in 6 blocks
==12899==         suppressed: 0 bytes in 0 blocks
==12899== Reachable blocks (those to which a pointer was found) are not shown.
==12899== To see them, rerun with: --leak-check=full --show-reachable=yes
==12899== 
==12899== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
==12899== 
==12899== 1 errors in context 1 of 1:
==12899== Invalid read of size 1
==12899==    at 0x400B17: print_packed (<stdin>:14)
==12899==    by 0x401D6F: test_implode_XX (<stdin>:416)
==12899==    by 0x402544: main (<stdin>:581)
==12899==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==12899== 
--12899-- 
--12899-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--12899-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==12899== 
==12899== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 16 :: implode(...)

   int len = 2
   char * * strArr = malloc(len * sizeof(char*));
   strArr[0] = strdup("The");
   strArr[1] = strdup("Turing test");
   const char * glue = "{newline}";
   char * s = implode(strArr, len, glue);
   // s is "Memory errors detected, testcase failed.
==19526== Memcheck, a memory error detector
==19526== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19526== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19526== Command: /tmp/.11HkrK/a.out 15
==19526== Parent PID: 19523
==19526== 
--19526-- 
--19526-- Valgrind options:
--19526--    --tool=memcheck
--19526--    --leak-check=full
--19526--    --verbose
--19526--    --log-file=memcheck.log
--19526-- Contents of /proc/version:
--19526--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--19526-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--19526-- Page sizes: currently 4096, max supported 4096
--19526-- Valgrind library directory: /usr/lib64/valgrind
--19526-- Reading syms from /tmp/.11HkrK/a.out
--19526-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--19526--    object doesn't have a dynamic symbol table
--19526-- Reading syms from /lib64/ld-2.12.so
--19526--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--19526--   .. build-id is valid
--19526-- Scheduler: using generic scheduler lock implementation.
--19526-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==19526== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-19526-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==19526== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-19526-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==19526== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-19526-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==19526== 
==19526== TO CONTROL THIS PROCESS USING vgdb (which you probably
==19526== don't want to do, unless you know exactly what you're doing,
==19526== or are doing some strange experiment):
==19526==   /usr/lib64/valgrind/../../bin/vgdb --pid=19526 ...command...
==19526== 
==19526== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==19526==   /path/to/gdb /tmp/.11HkrK/a.out
==19526== and then give GDB the following command
==19526==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=19526
==19526== --pid is optional if only one valgrind process is running
==19526== 
--19526-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--19526-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--19526-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--19526-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--19526-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--19526-- Reading syms from /lib64/libc-2.12.so
--19526--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--19526--   .. build-id is valid
--19526-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--19526-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--19526-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--19526-- REDIR: 0x3f79e7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--19526-- REDIR: 0x3f79f281e0 (__strchr_sse42) redirected to 0x4a07b00 (index)
--19526-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--19526-- REDIR: 0x3f79e89670 (memcpy) redirected to 0x4a08b20 (memcpy)
--19526-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--19526-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--19526-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--19526-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
--19526-- REDIR: 0x3f79e81120 (strlen) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--19526-- REDIR: 0x3f79f33560 (__strlen_sse42) redirected to 0x4a07f50 (strlen)
--19526-- REDIR: 0x3f79e7f470 (strcat) redirected to 0x4a07c20 (strcat)
--19526-- REDIR: 0x3f79e80b70 (strcpy) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--19526-- REDIR: 0x3f79f34000 (???) redirected to 0x4a07f90 (strcpy)
==19526== Invalid read of size 1
==19526==    at 0x400B17: print_packed (<stdin>:14)
==19526==    by 0x401D6F: test_implode_XX (<stdin>:416)
==19526==    by 0x402562: main (<stdin>:582)
==19526==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==19526== 
==19526== 
==19526== Process terminating with default action of signal 11 (SIGSEGV)
==19526==  Access not within mapped region at address 0x0
==19526==    at 0x400B17: print_packed (<stdin>:14)
==19526==    by 0x401D6F: test_implode_XX (<stdin>:416)
==19526==    by 0x402562: main (<stdin>:582)
==19526==  If you believe this happened as a result of a stack
==19526==  overflow in your program's main thread (unlikely but
==19526==  possible), you can try to increase the size of the
==19526==  main thread stack using the --main-stacksize= flag.
==19526==  The main thread stack size used in this run was 10485760.
==19526== 
==19526== HEAP SUMMARY:
==19526==     in use at exit: 73 bytes in 5 blocks
==19526==   total heap usage: 6 allocs, 1 frees, 80 bytes allocated
==19526== 
==19526== Searching for pointers to 5 not-freed blocks
==19526== Checked 65,016 bytes
==19526== 
==19526== LEAK SUMMARY:
==19526==    definitely lost: 0 bytes in 0 blocks
==19526==    indirectly lost: 0 bytes in 0 blocks
==19526==      possibly lost: 0 bytes in 0 blocks
==19526==    still reachable: 73 bytes in 5 blocks
==19526==         suppressed: 0 bytes in 0 blocks
==19526== Reachable blocks (those to which a pointer was found) are not shown.
==19526== To see them, rerun with: --leak-check=full --show-reachable=yes
==19526== 
==19526== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
==19526== 
==19526== 1 errors in context 1 of 1:
==19526== Invalid read of size 1
==19526==    at 0x400B17: print_packed (<stdin>:14)
==19526==    by 0x401D6F: test_implode_XX (<stdin>:416)
==19526==    by 0x402562: main (<stdin>:582)
==19526==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==19526== 
--19526-- 
--19526-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--19526-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==19526== 
==19526== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 17 :: implode(...)

   int len = 5
   char * * strArr = malloc(len * sizeof(char*));
   strArr[0] = strdup("");
   strArr[1] = strdup("he\n");
   strArr[2] = strdup("uring ");
   strArr[3] = strdup("es");
   strArr[4] = strdup("");
   const char * glue = "";
   char * s = implode(strArr, len, glue);
   // s is "Memory errors detected, testcase failed.
==25468== Memcheck, a memory error detector
==25468== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==25468== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==25468== Command: /tmp/.11HkrK/a.out 16
==25468== Parent PID: 25465
==25468== 
--25468-- 
--25468-- Valgrind options:
--25468--    --tool=memcheck
--25468--    --leak-check=full
--25468--    --verbose
--25468--    --log-file=memcheck.log
--25468-- Contents of /proc/version:
--25468--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--25468-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--25468-- Page sizes: currently 4096, max supported 4096
--25468-- Valgrind library directory: /usr/lib64/valgrind
--25468-- Reading syms from /tmp/.11HkrK/a.out
--25468-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--25468--    object doesn't have a dynamic symbol table
--25468-- Reading syms from /lib64/ld-2.12.so
--25468--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--25468--   .. build-id is valid
--25468-- Scheduler: using generic scheduler lock implementation.
--25468-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==25468== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-25468-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==25468== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-25468-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==25468== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-25468-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==25468== 
==25468== TO CONTROL THIS PROCESS USING vgdb (which you probably
==25468== don't want to do, unless you know exactly what you're doing,
==25468== or are doing some strange experiment):
==25468==   /usr/lib64/valgrind/../../bin/vgdb --pid=25468 ...command...
==25468== 
==25468== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==25468==   /path/to/gdb /tmp/.11HkrK/a.out
==25468== and then give GDB the following command
==25468==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=25468
==25468== --pid is optional if only one valgrind process is running
==25468== 
--25468-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--25468-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--25468-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--25468-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--25468-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--25468-- Reading syms from /lib64/libc-2.12.so
--25468--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--25468--   .. build-id is valid
--25468-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--25468-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--25468-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--25468-- REDIR: 0x3f79e7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--25468-- REDIR: 0x3f79f281e0 (__strchr_sse42) redirected to 0x4a07b00 (index)
--25468-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--25468-- REDIR: 0x3f79e89670 (memcpy) redirected to 0x4a08b20 (memcpy)
--25468-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--25468-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--25468-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--25468-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
--25468-- REDIR: 0x3f79e81120 (strlen) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--25468-- REDIR: 0x3f79f33560 (__strlen_sse42) redirected to 0x4a07f50 (strlen)
--25468-- REDIR: 0x3f79e7f470 (strcat) redirected to 0x4a07c20 (strcat)
--25468-- REDIR: 0x3f79e80b70 (strcpy) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--25468-- REDIR: 0x3f79f34000 (???) redirected to 0x4a07f90 (strcpy)
==25468== Invalid read of size 1
==25468==    at 0x400B17: print_packed (<stdin>:14)
==25468==    by 0x401D6F: test_implode_XX (<stdin>:416)
==25468==    by 0x402580: main (<stdin>:583)
==25468==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==25468== 
==25468== 
==25468== Process terminating with default action of signal 11 (SIGSEGV)
==25468==  Access not within mapped region at address 0x0
==25468==    at 0x400B17: print_packed (<stdin>:14)
==25468==    by 0x401D6F: test_implode_XX (<stdin>:416)
==25468==    by 0x402580: main (<stdin>:583)
==25468==  If you believe this happened as a result of a stack
==25468==  overflow in your program's main thread (unlikely but
==25468==  possible), you can try to increase the size of the
==25468==  main thread stack using the --main-stacksize= flag.
==25468==  The main thread stack size used in this run was 10485760.
==25468== 
==25468== HEAP SUMMARY:
==25468==     in use at exit: 115 bytes in 8 blocks
==25468==   total heap usage: 10 allocs, 2 frees, 123 bytes allocated
==25468== 
==25468== Searching for pointers to 8 not-freed blocks
==25468== Checked 65,040 bytes
==25468== 
==25468== LEAK SUMMARY:
==25468==    definitely lost: 0 bytes in 0 blocks
==25468==    indirectly lost: 0 bytes in 0 blocks
==25468==      possibly lost: 0 bytes in 0 blocks
==25468==    still reachable: 115 bytes in 8 blocks
==25468==         suppressed: 0 bytes in 0 blocks
==25468== Reachable blocks (those to which a pointer was found) are not shown.
==25468== To see them, rerun with: --leak-check=full --show-reachable=yes
==25468== 
==25468== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
==25468== 
==25468== 1 errors in context 1 of 1:
==25468== Invalid read of size 1
==25468==    at 0x400B17: print_packed (<stdin>:14)
==25468==    by 0x401D6F: test_implode_XX (<stdin>:416)
==25468==    by 0x402580: main (<stdin>:583)
==25468==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==25468== 
--25468-- 
--25468-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--25468-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==25468== 
==25468== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 18 :: implode(...)

   int len = 1
   char * * strArr = malloc(len * sizeof(char*));
   strArr[0] = strdup("");
   const char * glue = "Z";
   char * s = implode(strArr, len, glue);
   // s is "Memory errors detected, testcase failed.
==32225== Memcheck, a memory error detector
==32225== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==32225== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==32225== Command: /tmp/.11HkrK/a.out 17
==32225== Parent PID: 32221
==32225== 
--32225-- 
--32225-- Valgrind options:
--32225--    --tool=memcheck
--32225--    --leak-check=full
--32225--    --verbose
--32225--    --log-file=memcheck.log
--32225-- Contents of /proc/version:
--32225--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--32225-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--32225-- Page sizes: currently 4096, max supported 4096
--32225-- Valgrind library directory: /usr/lib64/valgrind
--32225-- Reading syms from /tmp/.11HkrK/a.out
--32225-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--32225--    object doesn't have a dynamic symbol table
--32225-- Reading syms from /lib64/ld-2.12.so
--32225--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--32225--   .. build-id is valid
--32225-- Scheduler: using generic scheduler lock implementation.
--32225-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==32225== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-32225-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==32225== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-32225-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==32225== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-32225-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==32225== 
==32225== TO CONTROL THIS PROCESS USING vgdb (which you probably
==32225== don't want to do, unless you know exactly what you're doing,
==32225== or are doing some strange experiment):
==32225==   /usr/lib64/valgrind/../../bin/vgdb --pid=32225 ...command...
==32225== 
==32225== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==32225==   /path/to/gdb /tmp/.11HkrK/a.out
==32225== and then give GDB the following command
==32225==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=32225
==32225== --pid is optional if only one valgrind process is running
==32225== 
--32225-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--32225-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--32225-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--32225-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--32225-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--32225-- Reading syms from /lib64/libc-2.12.so
--32225--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--32225--   .. build-id is valid
--32225-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--32225-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--32225-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--32225-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--32225-- REDIR: 0x3f79e89670 (memcpy) redirected to 0x4a08b20 (memcpy)
--32225-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--32225-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--32225-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--32225-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
--32225-- REDIR: 0x3f79e81120 (strlen) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--32225-- REDIR: 0x3f79f33560 (__strlen_sse42) redirected to 0x4a07f50 (strlen)
--32225-- REDIR: 0x3f79e7f470 (strcat) redirected to 0x4a07c20 (strcat)
==32225== Invalid read of size 1
==32225==    at 0x400B17: print_packed (<stdin>:14)
==32225==    by 0x401D6F: test_implode_XX (<stdin>:416)
==32225==    by 0x40259E: main (<stdin>:584)
==32225==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==32225== 
==32225== 
==32225== Process terminating with default action of signal 11 (SIGSEGV)
==32225==  Access not within mapped region at address 0x0
==32225==    at 0x400B17: print_packed (<stdin>:14)
==32225==    by 0x401D6F: test_implode_XX (<stdin>:416)
==32225==    by 0x40259E: main (<stdin>:584)
==32225==  If you believe this happened as a result of a stack
==32225==  overflow in your program's main thread (unlikely but
==32225==  possible), you can try to increase the size of the
==32225==  main thread stack using the --main-stacksize= flag.
==32225==  The main thread stack size used in this run was 10485760.
==32225== 
==32225== HEAP SUMMARY:
==32225==     in use at exit: 18 bytes in 4 blocks
==32225==   total heap usage: 4 allocs, 0 frees, 18 bytes allocated
==32225== 
==32225== Searching for pointers to 4 not-freed blocks
==32225== Checked 64,968 bytes
==32225== 
==32225== LEAK SUMMARY:
==32225==    definitely lost: 0 bytes in 0 blocks
==32225==    indirectly lost: 0 bytes in 0 blocks
==32225==      possibly lost: 0 bytes in 0 blocks
==32225==    still reachable: 18 bytes in 4 blocks
==32225==         suppressed: 0 bytes in 0 blocks
==32225== Reachable blocks (those to which a pointer was found) are not shown.
==32225== To see them, rerun with: --leak-check=full --show-reachable=yes
==32225== 
==32225== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
==32225== 
==32225== 1 errors in context 1 of 1:
==32225== Invalid read of size 1
==32225==    at 0x400B17: print_packed (<stdin>:14)
==32225==    by 0x401D6F: test_implode_XX (<stdin>:416)
==32225==    by 0x40259E: main (<stdin>:584)
==32225==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==32225== 
--32225-- 
--32225-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--32225-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==32225== 
==32225== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 19 :: implode(...)

   int len = 1
   char * * strArr = malloc(len * sizeof(char*));
   strArr[0] = strdup("");
   const char * glue = "";
   char * s = implode(strArr, len, glue);
   // s is "Memory errors detected, testcase failed.
==6907== Memcheck, a memory error detector
==6907== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==6907== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==6907== Command: /tmp/.11HkrK/a.out 18
==6907== Parent PID: 6904
==6907== 
--6907-- 
--6907-- Valgrind options:
--6907--    --tool=memcheck
--6907--    --leak-check=full
--6907--    --verbose
--6907--    --log-file=memcheck.log
--6907-- Contents of /proc/version:
--6907--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--6907-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--6907-- Page sizes: currently 4096, max supported 4096
--6907-- Valgrind library directory: /usr/lib64/valgrind
--6907-- Reading syms from /tmp/.11HkrK/a.out
--6907-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--6907--    object doesn't have a dynamic symbol table
--6907-- Reading syms from /lib64/ld-2.12.so
--6907--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--6907--   .. build-id is valid
--6907-- Scheduler: using generic scheduler lock implementation.
--6907-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==6907== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-6907-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==6907== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-6907-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==6907== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-6907-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==6907== 
==6907== TO CONTROL THIS PROCESS USING vgdb (which you probably
==6907== don't want to do, unless you know exactly what you're doing,
==6907== or are doing some strange experiment):
==6907==   /usr/lib64/valgrind/../../bin/vgdb --pid=6907 ...command...
==6907== 
==6907== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==6907==   /path/to/gdb /tmp/.11HkrK/a.out
==6907== and then give GDB the following command
==6907==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=6907
==6907== --pid is optional if only one valgrind process is running
==6907== 
--6907-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--6907-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--6907-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--6907-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--6907-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--6907-- Reading syms from /lib64/libc-2.12.so
--6907--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--6907--   .. build-id is valid
--6907-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--6907-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--6907-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--6907-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--6907-- REDIR: 0x3f79e89670 (memcpy) redirected to 0x4a08b20 (memcpy)
--6907-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--6907-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--6907-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--6907-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
--6907-- REDIR: 0x3f79e81120 (strlen) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--6907-- REDIR: 0x3f79f33560 (__strlen_sse42) redirected to 0x4a07f50 (strlen)
--6907-- REDIR: 0x3f79e7f470 (strcat) redirected to 0x4a07c20 (strcat)
==6907== Invalid read of size 1
==6907==    at 0x400B17: print_packed (<stdin>:14)
==6907==    by 0x401D6F: test_implode_XX (<stdin>:416)
==6907==    by 0x4025BC: main (<stdin>:585)
==6907==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==6907== 
==6907== 
==6907== Process terminating with default action of signal 11 (SIGSEGV)
==6907==  Access not within mapped region at address 0x0
==6907==    at 0x400B17: print_packed (<stdin>:14)
==6907==    by 0x401D6F: test_implode_XX (<stdin>:416)
==6907==    by 0x4025BC: main (<stdin>:585)
==6907==  If you believe this happened as a result of a stack
==6907==  overflow in your program's main thread (unlikely but
==6907==  possible), you can try to increase the size of the
==6907==  main thread stack using the --main-stacksize= flag.
==6907==  The main thread stack size used in this run was 10485760.
==6907== 
==6907== HEAP SUMMARY:
==6907==     in use at exit: 18 bytes in 4 blocks
==6907==   total heap usage: 4 allocs, 0 frees, 18 bytes allocated
==6907== 
==6907== Searching for pointers to 4 not-freed blocks
==6907== Checked 64,968 bytes
==6907== 
==6907== LEAK SUMMARY:
==6907==    definitely lost: 0 bytes in 0 blocks
==6907==    indirectly lost: 0 bytes in 0 blocks
==6907==      possibly lost: 0 bytes in 0 blocks
==6907==    still reachable: 18 bytes in 4 blocks
==6907==         suppressed: 0 bytes in 0 blocks
==6907== Reachable blocks (those to which a pointer was found) are not shown.
==6907== To see them, rerun with: --leak-check=full --show-reachable=yes
==6907== 
==6907== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
==6907== 
==6907== 1 errors in context 1 of 1:
==6907== Invalid read of size 1
==6907==    at 0x400B17: print_packed (<stdin>:14)
==6907==    by 0x401D6F: test_implode_XX (<stdin>:416)
==6907==    by 0x4025BC: main (<stdin>:585)
==6907==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==6907== 
--6907-- 
--6907-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--6907-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==6907== 
==6907== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 20 :: implode(...)

   int len = 25
   char * * strArr = malloc(len * sizeof(char*));
   strArr[0] = strdup("The");
   strArr[1] = strdup("more");
   strArr[2] = strdup("that");
   strArr[3] = strdup("you");
   strArr[4] = strdup("read");
   strArr[5] = strdup("");
   strArr[6] = strdup("the");
   strArr[7] = strdup("more");
   strArr[8] = strdup("things");
   strArr[9] = strdup("you");
   strArr[10] = strdup("will");
   strArr[11] = strdup("know");
   strArr[12] = strdup("");
   strArr[13] = strdup("The");
   strArr[14] = strdup("more");
   strArr[15] = strdup("that");
   strArr[16] = strdup("you");
   strArr[17] = strdup("learn");
   strArr[18] = strdup("");
   strArr[19] = strdup("the");
   strArr[20] = strdup("more");
   strArr[21] = strdup("places");
   strArr[22] = strdup("you\'ll");
   strArr[23] = strdup("go");
   strArr[24] = strdup("");
   const char * glue = " -- ";
   char * s = implode(strArr, len, glue);
   // s is "Memory errors detected, testcase failed.
==13752== Memcheck, a memory error detector
==13752== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==13752== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==13752== Command: /tmp/.11HkrK/a.out 19
==13752== Parent PID: 13749
==13752== 
--13752-- 
--13752-- Valgrind options:
--13752--    --tool=memcheck
--13752--    --leak-check=full
--13752--    --verbose
--13752--    --log-file=memcheck.log
--13752-- Contents of /proc/version:
--13752--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--13752-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--13752-- Page sizes: currently 4096, max supported 4096
--13752-- Valgrind library directory: /usr/lib64/valgrind
--13752-- Reading syms from /tmp/.11HkrK/a.out
--13752-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--13752--    object doesn't have a dynamic symbol table
--13752-- Reading syms from /lib64/ld-2.12.so
--13752--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--13752--   .. build-id is valid
--13752-- Scheduler: using generic scheduler lock implementation.
--13752-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==13752== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-13752-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==13752== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-13752-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==13752== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-13752-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==13752== 
==13752== TO CONTROL THIS PROCESS USING vgdb (which you probably
==13752== don't want to do, unless you know exactly what you're doing,
==13752== or are doing some strange experiment):
==13752==   /usr/lib64/valgrind/../../bin/vgdb --pid=13752 ...command...
==13752== 
==13752== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==13752==   /path/to/gdb /tmp/.11HkrK/a.out
==13752== and then give GDB the following command
==13752==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=13752
==13752== --pid is optional if only one valgrind process is running
==13752== 
--13752-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--13752-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--13752-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--13752-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--13752-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--13752-- Reading syms from /lib64/libc-2.12.so
--13752--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--13752--   .. build-id is valid
--13752-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--13752-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--13752-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--13752-- REDIR: 0x3f79e7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--13752-- REDIR: 0x3f79f281e0 (__strchr_sse42) redirected to 0x4a07b00 (index)
--13752-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--13752-- REDIR: 0x3f79e89670 (memcpy) redirected to 0x4a08b20 (memcpy)
--13752-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--13752-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--13752-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--13752-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
--13752-- REDIR: 0x3f79e81120 (strlen) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--13752-- REDIR: 0x3f79f33560 (__strlen_sse42) redirected to 0x4a07f50 (strlen)
--13752-- REDIR: 0x3f79e7f470 (strcat) redirected to 0x4a07c20 (strcat)
--13752-- REDIR: 0x3f79e80b70 (strcpy) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--13752-- REDIR: 0x3f79f34000 (???) redirected to 0x4a07f90 (strcpy)
==13752== Invalid read of size 1
==13752==    at 0x400B17: print_packed (<stdin>:14)
==13752==    by 0x401D6F: test_implode_XX (<stdin>:416)
==13752==    by 0x4025DF: main (<stdin>:586)
==13752==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==13752== 
==13752== 
==13752== Process terminating with default action of signal 11 (SIGSEGV)
==13752==  Access not within mapped region at address 0x0
==13752==    at 0x400B17: print_packed (<stdin>:14)
==13752==    by 0x401D6F: test_implode_XX (<stdin>:416)
==13752==    by 0x4025DF: main (<stdin>:586)
==13752==  If you believe this happened as a result of a stack
==13752==  overflow in your program's main thread (unlikely but
==13752==  possible), you can try to increase the size of the
==13752==  main thread stack using the --main-stacksize= flag.
==13752==  The main thread stack size used in this run was 10485760.
==13752== 
==13752== HEAP SUMMARY:
==13752==     in use at exit: 796 bytes in 28 blocks
==13752==   total heap usage: 33 allocs, 5 frees, 1,059 bytes allocated
==13752== 
==13752== Searching for pointers to 28 not-freed blocks
==13752== Checked 65,528 bytes
==13752== 
==13752== LEAK SUMMARY:
==13752==    definitely lost: 0 bytes in 0 blocks
==13752==    indirectly lost: 0 bytes in 0 blocks
==13752==      possibly lost: 0 bytes in 0 blocks
==13752==    still reachable: 796 bytes in 28 blocks
==13752==         suppressed: 0 bytes in 0 blocks
==13752== Reachable blocks (those to which a pointer was found) are not shown.
==13752== To see them, rerun with: --leak-check=full --show-reachable=yes
==13752== 
==13752== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
==13752== 
==13752== 1 errors in context 1 of 1:
==13752== Invalid read of size 1
==13752==    at 0x400B17: print_packed (<stdin>:14)
==13752==    by 0x401D6F: test_implode_XX (<stdin>:416)
==13752==    by 0x4025DF: main (<stdin>:586)
==13752==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==13752== 
--13752-- 
--13752-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--13752-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==13752== 
==13752== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 21 :: implode(...)

   int len = 35
   char * * strArr = malloc(len * sizeof(char*));
   strArr[0] = strdup("Twas brillig, and the slithy toves");
   strArr[1] = strdup("Did gyre and gimble in the wabe:");
   strArr[2] = strdup("All mimsy were the borogoves,");
   strArr[3] = strdup("And the mome raths outgrabe.");
   strArr[4] = strdup("");
   strArr[5] = strdup("Beware the Jabberwock, my son!");
   strArr[6] = strdup("The jaws that bite, the claws that catch!");
   strArr[7] = strdup("Beware the Jubjub bird, and shun");
   strArr[8] = strdup("The frumious Bandersnatch!");
   strArr[9] = strdup("");
   strArr[10] = strdup("He took his vorpal sword in hand:");
   strArr[11] = strdup("Long time the manxome foe he sought --");
   strArr[12] = strdup("So rested he by the Tumtum tree,");
   strArr[13] = strdup("And stood awhile in thought.");
   strArr[14] = strdup("");
   strArr[15] = strdup("And, as in uffish thought he stood,");
   strArr[16] = strdup("The Jabberwock, with eyes of flame,");
   strArr[17] = strdup("Came whiffling through the tulgey wood,");
   strArr[18] = strdup("And burbled as it came!");
   strArr[19] = strdup("");
   strArr[20] = strdup("One, two! One, two! And through and through");
   strArr[21] = strdup("The vorpal blade went snicker-snack!");
   strArr[22] = strdup("He left it dead, and with its head");
   strArr[23] = strdup("He went galumphing back.");
   strArr[24] = strdup("");
   strArr[25] = strdup("And, has thou slain the Jabberwock?");
   strArr[26] = strdup("Come to my arms, my beamish boy!");
   strArr[27] = strdup("O frabjous day! Callooh! Callay!");
   strArr[28] = strdup("He chortled in his joy.");
   strArr[29] = strdup("");
   strArr[30] = strdup("Twas brillig, and the slithy toves");
   strArr[31] = strdup("Did gyre and gimble in the wabe;");
   strArr[32] = strdup("All mimsy were the borogoves,");
   strArr[33] = strdup("And the mome raths outgrabe.");
   strArr[34] = strdup("");
   const char * glue = ";\n";
   char * s = implode(strArr, len, glue);
   // s is "Memory errors detected, testcase failed.
==20113== Memcheck, a memory error detector
==20113== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==20113== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==20113== Command: /tmp/.11HkrK/a.out 20
==20113== Parent PID: 20111
==20113== 
--20113-- 
--20113-- Valgrind options:
--20113--    --tool=memcheck
--20113--    --leak-check=full
--20113--    --verbose
--20113--    --log-file=memcheck.log
--20113-- Contents of /proc/version:
--20113--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--20113-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--20113-- Page sizes: currently 4096, max supported 4096
--20113-- Valgrind library directory: /usr/lib64/valgrind
--20113-- Reading syms from /tmp/.11HkrK/a.out
--20113-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--20113--    object doesn't have a dynamic symbol table
--20113-- Reading syms from /lib64/ld-2.12.so
--20113--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--20113--   .. build-id is valid
--20113-- Scheduler: using generic scheduler lock implementation.
--20113-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==20113== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-20113-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==20113== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-20113-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==20113== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-20113-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==20113== 
==20113== TO CONTROL THIS PROCESS USING vgdb (which you probably
==20113== don't want to do, unless you know exactly what you're doing,
==20113== or are doing some strange experiment):
==20113==   /usr/lib64/valgrind/../../bin/vgdb --pid=20113 ...command...
==20113== 
==20113== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==20113==   /path/to/gdb /tmp/.11HkrK/a.out
==20113== and then give GDB the following command
==20113==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=20113
==20113== --pid is optional if only one valgrind process is running
==20113== 
--20113-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--20113-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--20113-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--20113-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--20113-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--20113-- Reading syms from /lib64/libc-2.12.so
--20113--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--20113--   .. build-id is valid
--20113-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--20113-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--20113-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--20113-- REDIR: 0x3f79e7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--20113-- REDIR: 0x3f79f281e0 (__strchr_sse42) redirected to 0x4a07b00 (index)
--20113-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--20113-- REDIR: 0x3f79e89670 (memcpy) redirected to 0x4a08b20 (memcpy)
--20113-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--20113-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--20113-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--20113-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
--20113-- REDIR: 0x3f79e81120 (strlen) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--20113-- REDIR: 0x3f79f33560 (__strlen_sse42) redirected to 0x4a07f50 (strlen)
--20113-- REDIR: 0x3f79e7f470 (strcat) redirected to 0x4a07c20 (strcat)
--20113-- REDIR: 0x3f79e80b70 (strcpy) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--20113-- REDIR: 0x3f79f34000 (???) redirected to 0x4a07f90 (strcpy)
==20113== Invalid read of size 1
==20113==    at 0x400B17: print_packed (<stdin>:14)
==20113==    by 0x401D6F: test_implode_XX (<stdin>:416)
==20113==    by 0x402602: main (<stdin>:587)
==20113==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==20113== 
==20113== 
==20113== Process terminating with default action of signal 11 (SIGSEGV)
==20113==  Access not within mapped region at address 0x0
==20113==    at 0x400B17: print_packed (<stdin>:14)
==20113==    by 0x401D6F: test_implode_XX (<stdin>:416)
==20113==    by 0x402602: main (<stdin>:587)
==20113==  If you believe this happened as a result of a stack
==20113==  overflow in your program's main thread (unlikely but
==20113==  possible), you can try to increase the size of the
==20113==  main thread stack using the --main-stacksize= flag.
==20113==  The main thread stack size used in this run was 10485760.
==20113== 
==20113== HEAP SUMMARY:
==20113==     in use at exit: 2,889 bytes in 38 blocks
==20113==   total heap usage: 42 allocs, 4 frees, 4,117 bytes allocated
==20113== 
==20113== Searching for pointers to 38 not-freed blocks
==20113== Checked 67,312 bytes
==20113== 
==20113== LEAK SUMMARY:
==20113==    definitely lost: 0 bytes in 0 blocks
==20113==    indirectly lost: 0 bytes in 0 blocks
==20113==      possibly lost: 0 bytes in 0 blocks
==20113==    still reachable: 2,889 bytes in 38 blocks
==20113==         suppressed: 0 bytes in 0 blocks
==20113== Reachable blocks (those to which a pointer was found) are not shown.
==20113== To see them, rerun with: --leak-check=full --show-reachable=yes
==20113== 
==20113== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
==20113== 
==20113== 1 errors in context 1 of 1:
==20113== Invalid read of size 1
==20113==    at 0x400B17: print_packed (<stdin>:14)
==20113==    by 0x401D6F: test_implode_XX (<stdin>:416)
==20113==    by 0x402602: main (<stdin>:587)
==20113==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==20113== 
--20113-- 
--20113-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--20113-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==20113== 
==20113== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 22 :: implode(...)

   int len = 6
   char * * strArr = malloc(len * sizeof(char*));
   strArr[0] = strdup("1");
   strArr[1] = strdup("2");
   strArr[2] = strdup("3");
   strArr[3] = strdup("4");
   strArr[4] = strdup("5");
   strArr[5] = strdup("6");
   const char * glue = ", ";
   char * s = implode(strArr, len, glue);
   // s is "Memory errors detected, testcase failed.
==26070== Memcheck, a memory error detector
==26070== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==26070== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==26070== Command: /tmp/.11HkrK/a.out 21
==26070== Parent PID: 26068
==26070== 
--26070-- 
--26070-- Valgrind options:
--26070--    --tool=memcheck
--26070--    --leak-check=full
--26070--    --verbose
--26070--    --log-file=memcheck.log
--26070-- Contents of /proc/version:
--26070--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--26070-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--26070-- Page sizes: currently 4096, max supported 4096
--26070-- Valgrind library directory: /usr/lib64/valgrind
--26070-- Reading syms from /tmp/.11HkrK/a.out
--26070-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--26070--    object doesn't have a dynamic symbol table
--26070-- Reading syms from /lib64/ld-2.12.so
--26070--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--26070--   .. build-id is valid
--26070-- Scheduler: using generic scheduler lock implementation.
--26070-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==26070== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-26070-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==26070== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-26070-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==26070== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-26070-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==26070== 
==26070== TO CONTROL THIS PROCESS USING vgdb (which you probably
==26070== don't want to do, unless you know exactly what you're doing,
==26070== or are doing some strange experiment):
==26070==   /usr/lib64/valgrind/../../bin/vgdb --pid=26070 ...command...
==26070== 
==26070== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==26070==   /path/to/gdb /tmp/.11HkrK/a.out
==26070== and then give GDB the following command
==26070==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=26070
==26070== --pid is optional if only one valgrind process is running
==26070== 
--26070-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--26070-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--26070-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--26070-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--26070-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--26070-- Reading syms from /lib64/libc-2.12.so
--26070--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--26070--   .. build-id is valid
--26070-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--26070-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--26070-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--26070-- REDIR: 0x3f79e7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--26070-- REDIR: 0x3f79f281e0 (__strchr_sse42) redirected to 0x4a07b00 (index)
--26070-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--26070-- REDIR: 0x3f79e89670 (memcpy) redirected to 0x4a08b20 (memcpy)
--26070-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--26070-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--26070-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--26070-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
--26070-- REDIR: 0x3f79e81120 (strlen) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--26070-- REDIR: 0x3f79f33560 (__strlen_sse42) redirected to 0x4a07f50 (strlen)
--26070-- REDIR: 0x3f79e7f470 (strcat) redirected to 0x4a07c20 (strcat)
--26070-- REDIR: 0x3f79e80b70 (strcpy) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--26070-- REDIR: 0x3f79f34000 (???) redirected to 0x4a07f90 (strcpy)
==26070== Invalid read of size 1
==26070==    at 0x400B17: print_packed (<stdin>:14)
==26070==    by 0x401D6F: test_implode_XX (<stdin>:416)
==26070==    by 0x402620: main (<stdin>:588)
==26070==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==26070== 
==26070== 
==26070== Process terminating with default action of signal 11 (SIGSEGV)
==26070==  Access not within mapped region at address 0x0
==26070==    at 0x400B17: print_packed (<stdin>:14)
==26070==    by 0x401D6F: test_implode_XX (<stdin>:416)
==26070==    by 0x402620: main (<stdin>:588)
==26070==  If you believe this happened as a result of a stack
==26070==  overflow in your program's main thread (unlikely but
==26070==  possible), you can try to increase the size of the
==26070==  main thread stack using the --main-stacksize= flag.
==26070==  The main thread stack size used in this run was 10485760.
==26070== 
==26070== HEAP SUMMARY:
==26070==     in use at exit: 139 bytes in 9 blocks
==26070==   total heap usage: 12 allocs, 3 frees, 164 bytes allocated
==26070== 
==26070== Searching for pointers to 9 not-freed blocks
==26070== Checked 65,064 bytes
==26070== 
==26070== LEAK SUMMARY:
==26070==    definitely lost: 0 bytes in 0 blocks
==26070==    indirectly lost: 0 bytes in 0 blocks
==26070==      possibly lost: 0 bytes in 0 blocks
==26070==    still reachable: 139 bytes in 9 blocks
==26070==         suppressed: 0 bytes in 0 blocks
==26070== Reachable blocks (those to which a pointer was found) are not shown.
==26070== To see them, rerun with: --leak-check=full --show-reachable=yes
==26070== 
==26070== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
==26070== 
==26070== 1 errors in context 1 of 1:
==26070== Invalid read of size 1
==26070==    at 0x400B17: print_packed (<stdin>:14)
==26070==    by 0x401D6F: test_implode_XX (<stdin>:416)
==26070==    by 0x402620: main (<stdin>:588)
==26070==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==26070== 
--26070-- 
--26070-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--26070-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==26070== 
==26070== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 23 :: sortStringArray(...)

   int len = 3
   char * * strArr = malloc(len * sizeof(char*));
   strArr[0] = strdup("lady");
   strArr[1] = strdup("beatle");
   strArr[2] = strdup("brew");
   sortStringArray(strArr, len);
   // strArr[0] is "lady", ERROR, expected "beatle"
   // strArr[1] is "beatle", ERROR, expected "brew"
   // strArr[2] is "brew", ERROR, expected "lady"
   FAIL

test 24 :: sortStringArray(...)

   int len = 1
   char * * strArr = malloc(len * sizeof(char*));
   strArr[0] = strdup("");
   sortStringArray(strArr, len);
   // strArr[0] is ""
   (pass.)

test 25 :: sortStringArray(...)

   int len = 35
   char * * strArr = malloc(len * sizeof(char*));
   strArr[0] = strdup("Twas brillig, and the slithy toves");
   strArr[1] = strdup("Did gyre and gimble in the wabe:");
   strArr[2] = strdup("All mimsy were the borogoves,");
   strArr[3] = strdup("And the mome raths outgrabe.");
   strArr[4] = strdup("");
   strArr[5] = strdup("Beware the Jabberwock, my son!");
   strArr[6] = strdup("The jaws that bite, the claws that catch!");
   strArr[7] = strdup("Beware the Jubjub bird, and shun");
   strArr[8] = strdup("The frumious Bandersnatch!");
   strArr[9] = strdup("");
   strArr[10] = strdup("He took his vorpal sword in hand:");
   strArr[11] = strdup("Long time the manxome foe he sought --");
   strArr[12] = strdup("So rested he by the Tumtum tree,");
   strArr[13] = strdup("And stood awhile in thought.");
   strArr[14] = strdup("");
   strArr[15] = strdup("And, as in uffish thought he stood,");
   strArr[16] = strdup("The Jabberwock, with eyes of flame,");
   strArr[17] = strdup("Came whiffling through the tulgey wood,");
   strArr[18] = strdup("And burbled as it came!");
   strArr[19] = strdup("");
   strArr[20] = strdup("One, two! One, two! And through and through");
   strArr[21] = strdup("The vorpal blade went snicker-snack!");
   strArr[22] = strdup("He left it dead, and with its head");
   strArr[23] = strdup("He went galumphing back.");
   strArr[24] = strdup("");
   strArr[25] = strdup("And, has thou slain the Jabberwock?");
   strArr[26] = strdup("Come to my arms, my beamish boy!");
   strArr[27] = strdup("O frabjous day! Callooh! Callay!");
   strArr[28] = strdup("He chortled in his joy.");
   strArr[29] = strdup("");
   strArr[30] = strdup("Twas brillig, and the slithy toves");
   strArr[31] = strdup("Did gyre and gimble in the wabe;");
   strArr[32] = strdup("All mimsy were the borogoves,");
   strArr[33] = strdup("And the mome raths outgrabe.");
   strArr[34] = strdup("");
   sortStringArray(strArr, len);
   // strArr[0] is "Twas brillig, and the slithy toves", ERROR, expected ""
   // strArr[1] is "Did gyre and gimble in the wabe:", ERROR, expected ""
   // strArr[2] is "All mimsy were the borogoves,", ERROR, expected ""
   // strArr[3] is "And the mome raths outgrabe.", ERROR, expected ""
   // strArr[4] is ""
   // strArr[5] is "Beware the Jabberwock, my son!", ERROR, expected ""
   // strArr[6] is "The jaws that bite, the claws that catch!", ERROR, expected ""
   // strArr[7] is "Beware the Jubjub bird, and shun", ERROR, expected "All mimsy were the borogoves,"
   // strArr[8] is "The frumious Bandersnatch!", ERROR, expected "All mimsy were the borogoves,"
   // strArr[9] is "", ERROR, expected "And burbled as it came!"
   // strArr[10] is "He took his vorpal sword in hand:", ERROR, expected "And stood awhile in thought."
   // strArr[11] is "Long time the manxome foe he sought --", ERROR, expected "And the mome raths outgrabe."
   // strArr[12] is "So rested he by the Tumtum tree,", ERROR, expected "And the mome raths outgrabe."
   // strArr[13] is "And stood awhile in thought.", ERROR, expected "And, as in uffish thought he stood,"
   // strArr[14] is "", ERROR, expected "And, has thou slain the Jabberwock?"
   // strArr[15] is "And, as in uffish thought he stood,", ERROR, expected "Beware the Jabberwock, my son!"
   // strArr[16] is "The Jabberwock, with eyes of flame,", ERROR, expected "Beware the Jubjub bird, and shun"
   // strArr[17] is "Came whiffling through the tulgey wood,"
   // strArr[18] is "And burbled as it came!", ERROR, expected "Come to my arms, my beamish boy!"
   // strArr[19] is "", ERROR, expected "Did gyre and gimble in the wabe:"
   // strArr[20] is "One, two! One, two! And through and through", ERROR, expected "Did gyre and gimble in the wabe;"
   // strArr[21] is "The vorpal blade went snicker-snack!", ERROR, expected "He chortled in his joy."
   // strArr[22] is "He left it dead, and with its head"
   // strArr[23] is "He went galumphing back.", ERROR, expected "He took his vorpal sword in hand:"
   // strArr[24] is "", ERROR, expected "He went galumphing back."
   // strArr[25] is "And, has thou slain the Jabberwock?", ERROR, expected "Long time the manxome foe he sought --"
   // strArr[26] is "Come to my arms, my beamish boy!", ERROR, expected "O frabjous day! Callooh! Callay!"
   // strArr[27] is "O frabjous day! Callooh! Callay!", ERROR, expected "One, two! One, two! And through and through"
   // strArr[28] is "He chortled in his joy.", ERROR, expected "So rested he by the Tumtum tree,"
   // strArr[29] is "", ERROR, expected "The Jabberwock, with eyes of flame,"
   // strArr[30] is "Twas brillig, and the slithy toves", ERROR, expected "The frumious Bandersnatch!"
   // strArr[31] is "Did gyre and gimble in the wabe;", ERROR, expected "The jaws that bite, the claws that catch!"
   // strArr[32] is "All mimsy were the borogoves,", ERROR, expected "The vorpal blade went snicker-snack!"
   // strArr[33] is "And the mome raths outgrabe.", ERROR, expected "Twas brillig, and the slithy toves"
   // strArr[34] is "", ERROR, expected "Twas brillig, and the slithy toves"
   FAIL

test 26 :: sortStringCharacters(...)

   char * s1 = strdup("The more that you read, the more things you will know. The more that you learn, the more places you\'ll go.");
   sortStringCharacters(s1)
   // s1 is now "The more that you read, the more things you will know. The more that you learn, the more places you\'ll go.", ERROR, expected "                    \',,..TTaaaaacdeeeeeeeeeeegghhhhhhhiikllllllmmmmnnnooooooooooprrrrrrsstttttttuuuuwwyyyy"

test 27 :: sortStringCharacters(...)

   char * s1 = strdup("How did it get so late so soon?");
   sortStringCharacters(s1)
   // s1 is now "How did it get so late so soon?", ERROR, expected "       ?Haddeegiilnooooossstttw"

test 28 :: sortStringCharacters(...)

   char * s1 = strdup("Twas brillig, and the slithy toves\nDid gyre and gimble in the wabe:\nAll mimsy were the borogoves,\nAnd the mome raths outgrabe.\n\nBeware the Jabberwock, my son!\nThe jaws that bite, the claws that catch!\nBeware the Jubjub bird, and shun\nThe frumious Bandersnatch!\n\nHe took his vorpal sword in hand:\nLong time the manxome foe he sought --\nSo rested he by the Tumtum tree,\nAnd stood awhile in thought.\n\nAnd, as in uffish thought he stood,\nThe Jabberwock, with eyes of flame,\nCame whiffling through the tulgey wood,\nAnd burbled as it came!\n\nOne, two! One, two! And through and through\nThe vorpal blade went snicker-snack!\nHe left it dead, and with its head\nHe went galumphing back.\n\nAnd, has thou slain the Jabberwock?\nCome to my arms, my beamish boy!\nO frabjous day! Callooh! Callay!\nHe chortled in his joy.\n\nTwas brillig, and the slithy toves\nDid gyre and gimble in the wabe;\nAll mimsy were the borogoves,\nAnd the mome raths outgrabe.\n");
   sortStringCharacters(s1)
   // s1 is now "Twas brillig, and the slithy toves\nDid gyre and gimble in the wabe:\nAll mimsy were the borogoves,\nAnd the mome raths outgrabe.\n\nBeware the Jabberwock, my son!\nThe jaws that bite, the claws that catch!\nBeware the Jubjub bird, and shun\nThe frumious Bandersnatch!\n\nHe took his vorpal sword in hand:\nLong time the manxome foe he sought --\nSo rested he by the Tumtum tree,\nAnd stood awhile in thought.\n\nAnd, as in uffish thought he stood,\nThe Jabberwock, with eyes of flame,\nCame whiffling through the tulgey wood,\nAnd burbled as it came!\n\nOne, two! One, two! And through and through\nThe vorpal blade went snicker-snack!\nHe left it dead, and with its head\nHe went galumphing back.\n\nAnd, has thou slain the Jabberwock?\nCome to my arms, my beamish boy!\nO frabjous day! Callooh! Callay!\nHe chortled in his joy.\n\nTwas brillig, and the slithy toves\nDid gyre and gimble in the wabe;\nAll mimsy were the borogoves,\nAnd the mome raths outgrabe.\n", ERROR, expected "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                                                                                           !!!!!!!!!!!,,,,,,,,,,,,,,,,,,---.....::;?AAAAAAAAABBBCCCCDDHHHHJJJJLOOOSTTTTTTTaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbccccccccccccdddddddddddddddddddddddddddddddeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeffffffffffggggggggggggggggggggghhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiijjjjkkkkkkklllllllllllllllllllllllllllllmmmmmmmmmmmmmmmmmmmmmmmmmmnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnooooooooooooooooooooooooooooooooooooooooooooooooooppprrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrssssssssssssssssssssssssssssssssssssstttttttttttttttttttttttttttttttttttttttttttttttttttttttttttuuuuuuuuuuuuuuuuuuuuuvvvvvvwwwwwwwwwwwwwwwwwwwwwwwxyyyyyyyyyyyyyyyy"

test 29 :: sortStringCharacters(...)

   char * s1 = strdup("");
   sortStringCharacters(s1)
   // s1 is now ""

test 30 :: destroyStringArray(...)

   int len = 3
   char * * strArr = malloc(len * sizeof(char*));
   strArr[0] = strdup("lady");
   strArr[1] = strdup("beatle");
   strArr[2] = strdup("brew");
   destroyStringArray(strArr, len);
   // Pass conditional on no memory errors
Memory errors detected, testcase failed.
==10004== Memcheck, a memory error detector
==10004== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==10004== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==10004== Command: /tmp/.11HkrK/a.out 29
==10004== Parent PID: 10003
==10004== 
--10004-- 
--10004-- Valgrind options:
--10004--    --tool=memcheck
--10004--    --leak-check=full
--10004--    --verbose
--10004--    --log-file=memcheck.log
--10004-- Contents of /proc/version:
--10004--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--10004-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--10004-- Page sizes: currently 4096, max supported 4096
--10004-- Valgrind library directory: /usr/lib64/valgrind
--10004-- Reading syms from /tmp/.11HkrK/a.out
--10004-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--10004--    object doesn't have a dynamic symbol table
--10004-- Reading syms from /lib64/ld-2.12.so
--10004--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--10004--   .. build-id is valid
--10004-- Scheduler: using generic scheduler lock implementation.
--10004-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==10004== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-10004-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==10004== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-10004-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==10004== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-10004-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==10004== 
==10004== TO CONTROL THIS PROCESS USING vgdb (which you probably
==10004== don't want to do, unless you know exactly what you're doing,
==10004== or are doing some strange experiment):
==10004==   /usr/lib64/valgrind/../../bin/vgdb --pid=10004 ...command...
==10004== 
==10004== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==10004==   /path/to/gdb /tmp/.11HkrK/a.out
==10004== and then give GDB the following command
==10004==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=10004
==10004== --pid is optional if only one valgrind process is running
==10004== 
--10004-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--10004-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--10004-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--10004-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--10004-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--10004-- Reading syms from /lib64/libc-2.12.so
--10004--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--10004--   .. build-id is valid
--10004-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--10004-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--10004-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--10004-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--10004-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--10004-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--10004-- REDIR: 0x3f79e7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--10004-- REDIR: 0x3f79f281e0 (__strchr_sse42) redirected to 0x4a07b00 (index)
--10004-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--10004-- REDIR: 0x3f79e89670 (memcpy) redirected to 0x4a08b20 (memcpy)
--10004-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
==10004== 
==10004== HEAP SUMMARY:
==10004==     in use at exit: 41 bytes in 4 blocks
==10004==   total heap usage: 4 allocs, 0 frees, 41 bytes allocated
==10004== 
==10004== Searching for pointers to 4 not-freed blocks
==10004== Checked 64,856 bytes
==10004== 
==10004== 41 (24 direct, 17 indirect) bytes in 1 blocks are definitely lost in loss record 3 of 3
==10004==    at 0x4A069EE: malloc (vg_replace_malloc.c:270)
==10004==    by 0x400C93: explode_sol (<stdin>:72)
==10004==    by 0x4022B4: test_destroyStringArray_XX (<stdin>:538)
==10004==    by 0x4026E2: main (<stdin>:596)
==10004== 
==10004== LEAK SUMMARY:
==10004==    definitely lost: 24 bytes in 1 blocks
==10004==    indirectly lost: 17 bytes in 3 blocks
==10004==      possibly lost: 0 bytes in 0 blocks
==10004==    still reachable: 0 bytes in 0 blocks
==10004==         suppressed: 0 bytes in 0 blocks
==10004== 
==10004== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
--10004-- 
--10004-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--10004-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==10004== 
==10004== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 31 :: destroyStringArray(...)

   int len = 1
   char * * strArr = malloc(len * sizeof(char*));
   strArr[0] = strdup("");
   destroyStringArray(strArr, len);
   // Pass conditional on no memory errors
Memory errors detected, testcase failed.
==15697== Memcheck, a memory error detector
==15697== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==15697== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==15697== Command: /tmp/.11HkrK/a.out 30
==15697== Parent PID: 15695
==15697== 
--15697-- 
--15697-- Valgrind options:
--15697--    --tool=memcheck
--15697--    --leak-check=full
--15697--    --verbose
--15697--    --log-file=memcheck.log
--15697-- Contents of /proc/version:
--15697--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--15697-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--15697-- Page sizes: currently 4096, max supported 4096
--15697-- Valgrind library directory: /usr/lib64/valgrind
--15697-- Reading syms from /tmp/.11HkrK/a.out
--15697-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--15697--    object doesn't have a dynamic symbol table
--15697-- Reading syms from /lib64/ld-2.12.so
--15697--   Considering /usr/lib/debug/.build-id/57/bf668f99b7f5917b8d55fbb645173c9a644575.debug ..
--15697--   .. build-id is valid
--15697-- Scheduler: using generic scheduler lock implementation.
--15697-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==15697== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-15697-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==15697== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-15697-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==15697== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-15697-by-suciu-on-ecegrid-thin1.ecn.purdue.edu
==15697== 
==15697== TO CONTROL THIS PROCESS USING vgdb (which you probably
==15697== don't want to do, unless you know exactly what you're doing,
==15697== or are doing some strange experiment):
==15697==   /usr/lib64/valgrind/../../bin/vgdb --pid=15697 ...command...
==15697== 
==15697== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==15697==   /path/to/gdb /tmp/.11HkrK/a.out
==15697== and then give GDB the following command
==15697==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=15697
==15697== --pid is optional if only one valgrind process is running
==15697== 
--15697-- REDIR: 0x3f79a17530 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--15697-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--15697-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--15697-- REDIR: 0x3f79a173a0 (index) redirected to 0x4a07bf0 (index)
--15697-- REDIR: 0x3f79a17420 (strcmp) redirected to 0x4a08530 (strcmp)
--15697-- Reading syms from /lib64/libc-2.12.so
--15697--   Considering /usr/lib/debug/.build-id/07/b5ce35eba864a01b697f5ca117e94b9248064f.debug ..
--15697--   .. build-id is valid
--15697-- REDIR: 0x3f79e84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--15697-- REDIR: 0x3f79e86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--15697-- REDIR: 0x3f79e82c40 (__GI_strrchr) redirected to 0x4a07a70 (__GI_strrchr)
--15697-- REDIR: 0x3f79e8aaf0 (strchrnul) redirected to 0x4a09f10 (strchrnul)
--15697-- REDIR: 0x3f79e84500 (mempcpy) redirected to 0x4a09f80 (mempcpy)
--15697-- REDIR: 0x3f79e7b520 (free) redirected to 0x4a06369 (free)
--15697-- REDIR: 0x3f79e7a640 (malloc) redirected to 0x4a0696c (malloc)
--15697-- REDIR: 0x3f79e89670 (memcpy) redirected to 0x4a08b20 (memcpy)
--15697-- REDIR: 0x3f79e81160 (__GI_strlen) redirected to 0x4a07f70 (__GI_strlen)
==15697== 
==15697== HEAP SUMMARY:
==15697==     in use at exit: 9 bytes in 2 blocks
==15697==   total heap usage: 2 allocs, 0 frees, 9 bytes allocated
==15697== 
==15697== Searching for pointers to 2 not-freed blocks
==15697== Checked 64,856 bytes
==15697== 
==15697== 9 (8 direct, 1 indirect) bytes in 1 blocks are definitely lost in loss record 2 of 2
==15697==    at 0x4A069EE: malloc (vg_replace_malloc.c:270)
==15697==    by 0x400C93: explode_sol (<stdin>:72)
==15697==    by 0x4022B4: test_destroyStringArray_XX (<stdin>:538)
==15697==    by 0x4026F8: main (<stdin>:597)
==15697== 
==15697== LEAK SUMMARY:
==15697==    definitely lost: 8 bytes in 1 blocks
==15697==    indirectly lost: 1 bytes in 1 blocks
==15697==      possibly lost: 0 bytes in 0 blocks
==15697==    still reachable: 0 bytes in 0 blocks
==15697==         suppressed: 0 bytes in 0 blocks
==15697== 
==15697== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
--15697-- 
--15697-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--15697-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==15697== 
==15697== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 32 :: destroyStringArray(...)

   destroyStringArray(NULL, 0);
   // Pass conditional on no memory errors


5/32 testcases passed.
Overall mark is a FAIL.
