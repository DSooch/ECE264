No frame selected.
No frame selected.
Starting program: /home/shay/a/suciu/ECE264/Fall2014/PA03/pa03 

Program exited normally.
The history is empty.
No default breakpoint address now.
Breakpoint 1 at 0x4008f5: file answer03.c, line 9.
Starting program: /home/shay/a/suciu/ECE264/Fall2014/PA03/pa03 

Program exited normally.
No symbol "a" in current context.
No symbol "a" in current context.
9	    *b = tmp;
10	    printf("Calling swapString(...)\n");
11	    printf("&a = %p\n", &a);
12	    printf("&b = %p\n", &b);
13	    printf("&tmp = %p\n", &tmp);
14	}
15	
16	int main(int argc, char * * argv)
17	{
18	    printf("Welcome to PA03.\n"
19		   "\n"
20		   "Please make sure that the swapString(...) function works\n"
21		   "\n");
22	    
23	    printf("Print out some memory addresses for argc, argv...\n"
24		   "to illustrate how memory is laid out.\n");
25	    printf("&argc = %p\n", &argc);
26	    printf("&argv = %p\n", &argv);
27	    printf("argv = %p\n", argv);
28	    printf("*argv = %p\n", *argv);
29	    printf("*argv = %s\n", *argv);
30	    printf("**argv = %c\n", **argv);
31	
32	    // Let's create our own array of strings
33	    printf("\nTesting swapString(...)\n");
34	    char * str1 = "one";
35	    char * str2 = "two";
36	    printf("Before swap, str1 == %p (i.e., '%s'), "
37		   "str2 == %p (i.e., '%s')\n", str1, str1, str2, str2);
38	    swapString(&str1, &str2);
Breakpoint 2 at 0x40081a: file main.c, line 29.
Starting program: /home/shay/a/suciu/ECE264/Fall2014/PA03/pa03 

Breakpoint 2, main (argc=1, argv=0x7fffffffe418) at main.c:29
29	    printf("*argv = %s\n", *argv);
$1 = (char **) 0x7fffffffe418
$2 = 0x7fffffffe675 "/home/shay/a/suciu/ECE264/Fall2014/PA03/pa03"
$3 = (char ***) 0x7fffffffe300
$4 = 47 '/'
str1 = 0x400620 "1\355I\211\321^H\211\342H\203\344\360PTI\307\300p\f@"
str2 = 0x0
Undefined info command: "*locasl".  Try "help info".
Undefined info command: "* locals".  Try "help info".
Generic command for showing things about the program being debugged.

List of info subcommands:

info address -- Describe where symbol SYM is stored
info all-registers -- List of all registers and their contents
info args -- Argument variables of current stack frame
info auto-load -- Print current status of auto-loaded files
info auto-load-scripts -- Print the list of automatically loaded Python scripts
info auxv -- Display the inferior's auxiliary vector
info bookmarks -- Status of user-settable bookmarks
info breakpoints -- Status of user-settable breakpoints
info catch -- Exceptions that can be caught in the current stack frame
info checkpoints -- IDs of currently known checkpoints
info classes -- All Objective-C classes
info common -- Print out the values contained in a Fortran COMMON block
info copying -- Conditions for redistributing copies of GDB
info dcache -- Print information on the dcache performance
info display -- Expressions to display when program stops
info extensions -- All filename extensions associated with a source language
info files -- Names of targets and files being debugged
info float -- Print the status of the floating point unit
info frame -- All about selected stack frame
info functions -- All function names
info handle -- What debugger does when program gets various signals
info inferiors -- IDs of currently known inferiors
info line -- Core addresses of the code for a source line
info locals -- Local variables of current stack frame
info macro -- Show the definition of MACRO
info mem -- Memory region attributes
info os -- Show OS data ARG
info probes -- Show available static probes
info proc -- Show /proc process information about any running process
info program -- Execution status of the program
info record -- Info record options
info registers -- List of integer registers and their contents
info scope -- List the variables local to a scope
info selectors -- All Objective-C selectors
info set -- Show all GDB settings
info sharedlibrary -- Status of loaded shared object libraries
info signals -- What debugger does when program gets various signals
info source -- Information about the current source file
info sources -- Source files in the program
info stack -- Backtrace of the stack
info static-tracepoint-markers -- List target static tracepoints markers
info symbol -- Describe what symbol is at location ADDR
info target -- Names of targets and files being debugged
info tasks -- Provide information about all known Ada tasks
info terminal -- Print inferior's saved terminal status
info threads -- IDs of currently known threads
info tracepoints -- Status of tracepoints
info tvariables -- Status of trace state variables and their values
info types -- All type names
info variables -- All global and static variable names
info vector -- Print the status of the vector unit
info warranty -- Various kinds of warranty you do not have
info watchpoints -- Status of watchpoints
info win -- List of all displayed windows

Type "help info" followed by info subcommand name for full documentation.
Type "apropos word" to search for commands related to "word".
Command name abbreviations are allowed if unambiguous.
24		   "to illustrate how memory is laid out.\n");
25	    printf("&argc = %p\n", &argc);
26	    printf("&argv = %p\n", &argv);
27	    printf("argv = %p\n", argv);
28	    printf("*argv = %p\n", *argv);
29	    printf("*argv = %s\n", *argv);
30	    printf("**argv = %c\n", **argv);
31	
32	    // Let's create our own array of strings
33	    printf("\nTesting swapString(...)\n");
The program being debugged has been started already.
Start it from the beginning? (y or n) 
Starting program: /home/shay/a/suciu/ECE264/Fall2014/PA03/pa03 

Breakpoint 2, main (argc=1, argv=0x7fffffffe418) at main.c:29
29	    printf("*argv = %s\n", *argv);
Undefined info command: "value locals".  Try "help info".
argc = 1
argv = 0x7fffffffe418
Initial frame selected; you cannot go up.
Bottom (innermost) frame selected; you cannot go down.
#0  main (argc=1, argv=0x7fffffffe418) at main.c:29
#0  main (argc=1, argv=0x7fffffffe418) at main.c:29
#0  main (argc=1, argv=0x7fffffffe418) at main.c:29
24		   "to illustrate how memory is laid out.\n");
25	    printf("&argc = %p\n", &argc);
26	    printf("&argv = %p\n", &argv);
27	    printf("argv = %p\n", argv);
28	    printf("*argv = %p\n", *argv);
29	    printf("*argv = %s\n", *argv);
30	    printf("**argv = %c\n", **argv);
31	
32	    // Let's create our own array of strings
33	    printf("\nTesting swapString(...)\n");
The program being debugged has been started already.
Start it from the beginning? (y or n) Program not restarted.
34	    char * str1 = "one";
35	    char * str2 = "two";
36	    printf("Before swap, str1 == %p (i.e., '%s'), "
37		   "str2 == %p (i.e., '%s')\n", str1, str1, str2, str2);
38	    swapString(&str1, &str2);
39	    printf("After swap, str1 == %p (i.e., '%s'), "
40		   "str2 == %p (i.e., '%s')\n", str1, str1, str2, str2);
41	
42	    return EXIT_SUCCESS;
43	}The program being debugged has been started already.
Start it from the beginning? (y or n) Program not restarted.
__printf (format=0x400e77 "*argv = %s\n") at printf.c:30
30	{
34	  va_start (arg, format);
35	  done = vfprintf (stdout, format, arg);
_IO_vfprintf_internal (s=0x35ffb8e7a0, format=0x400e77 "*argv = %s\n", 
    ap=0x7fffffffe220) at vfprintf.c:236
236	  int save_errno = errno;
201	{
236	  int save_errno = errno;
1283	  ORIENT;
1287	  ARGCHECK (s, format);
1298	  if (UNBUFFERED_P (s))
1309	  __va_copy (ap_save, ap);
1320	  f = lead_str_end = __find_specmb ((const UCHAR_T *) format);
__find_specmb (s=0x35ffb8e7a0, format=0x400e77 "*argv = %s\n", 
    ap=0x7fffffffe220) at printf-parse.h:109
109	  return (const unsigned char *) __strchrnul ((const char *) format, '%');
_IO_vfprintf_internal (s=0x35ffb8e7a0, format=0x400e77 "*argv = %s\n", 
    ap=0x7fffffffe220) at vfprintf.c:1309
1309	  __va_copy (ap_save, ap);
1320	  f = lead_str_end = __find_specmb ((const UCHAR_T *) format);
__find_specmb (s=0x35ffb8e7a0, format=0x400e77 "*argv = %s\n", 
    ap=0x7fffffffe220) at printf-parse.h:109
109	  return (const unsigned char *) __strchrnul ((const char *) format, '%');
strchrnul () at ../sysdeps/x86_64/strchrnul.S:27
27		movd	%esi, %xmm1
28		movq	%rdi, %rcx
29		punpcklbw %xmm1, %xmm1
30		andq	$~15, %rdi
31		pxor	%xmm2, %xmm2
32		punpcklbw %xmm1, %xmm1
33		orl	$0xffffffff, %esi
34		movdqa	(%rdi), %xmm0
35		pshufd	$0, %xmm1, %xmm1
36		subq	%rdi, %rcx
37		movdqa	%xmm0, %xmm3
38		leaq	16(%rdi), %rdi
Undefined command: "ss".  Try "help".
39		pcmpeqb	%xmm1, %xmm0
40		pcmpeqb	%xmm2, %xmm3
41		shl	%cl, %esi
42		pmovmskb %xmm0, %edx
The program being debugged has been started already.
Start it from the beginning? (y or n) 
Starting program: /home/shay/a/suciu/ECE264/Fall2014/PA03/pa03 

Breakpoint 2, main (argc=1, argv=0x7fffffffe418) at main.c:29
29	    printf("*argv = %s\n", *argv);
The program being debugged has been started already.
Start it from the beginning? (y or n) Program not restarted.
Undefined command: "retunr".  Try "help".
Make main return now? (y or n) #0  __libc_start_main (main=0x40078f <main>, 
    argc=1, ubp_av=0x7fffffffe418, init=<value optimized out>, 
    fini=<value optimized out>, rtld_fini=<value optimized out>, 
    stack_end=0x7fffffffe408) at libc-start.c:258
258	  exit (result);
#0  __libc_start_main (main=0x40078f <main>, argc=1, ubp_av=0x7fffffffe418, 
    init=<value optimized out>, fini=<value optimized out>, 
    rtld_fini=<value optimized out>, stack_end=0x7fffffffe408)
    at libc-start.c:258
#1  0x0000000000400649 in _start ()
253	#else
254	  /* Nothing fancy, just call the function.  */
255	  result = main (argc, argv, __environ MAIN_AUXVEC_PARAM);
256	#endif
257	
258	  exit (result);
259	}
The program being debugged has been started already.
Start it from the beginning? (y or n) 
Starting program: /home/shay/a/suciu/ECE264/Fall2014/PA03/pa03 

Breakpoint 2, main (argc=1, argv=0x7fffffffe418) at main.c:29
29	    printf("*argv = %s\n", *argv);
A debugging session is active.

	Inferior 1 [process 18501] will be killed.

Quit anyway? (y or n) 